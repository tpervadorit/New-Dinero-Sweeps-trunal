{
    "sourceFile": "backend/debugLogin.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754047611435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754047611435,
            "name": "Commit-0",
            "content": "const { Sequelize } = require('sequelize');\r\nrequire('dotenv').config();\r\n\r\n// Database connection configuration\r\nconst sequelize = new Sequelize({\r\n  dialect: 'postgres',\r\n  host: process.env.DB_WRITE_HOST || process.env.DB_READ_HOST,\r\n  port: process.env.DB_PORT || 5432,\r\n  username: process.env.DB_USER,\r\n  password: process.env.DB_PASSWORD,\r\n  database: process.env.DB_NAME,\r\n  logging: false\r\n});\r\n\r\nasync function debugLogin() {\r\n  try {\r\n    console.log('üîç Connecting to database...');\r\n    await sequelize.authenticate();\r\n    console.log('‚úÖ Database connected successfully');\r\n\r\n    // Check if test user exists\r\n    console.log('\\nüìã Checking test user...');\r\n    const user = await sequelize.query(`\r\n      SELECT user_id, username, first_name, last_name, is_active, is_email_verified\r\n      FROM users WHERE username = 'testuser'\r\n    `, { type: Sequelize.QueryTypes.SELECT });\r\n\r\n    if (user.length === 0) {\r\n      console.log('‚ùå Test user not found!');\r\n      return;\r\n    }\r\n    console.log('‚úÖ Test user found:', user[0]);\r\n\r\n    // Check user details\r\n    console.log('\\nüìã Checking user details...');\r\n    const userDetails = await sequelize.query(`\r\n      SELECT * FROM user_details WHERE user_id = $1\r\n    `, { \r\n      bind: [user[0].user_id],\r\n      type: Sequelize.QueryTypes.SELECT \r\n    });\r\n\r\n    if (userDetails.length === 0) {\r\n      console.log('‚ùå User details not found!');\r\n    } else {\r\n      console.log('‚úÖ User details found:', userDetails[0]);\r\n    }\r\n\r\n    // Check wallet\r\n    console.log('\\nüìã Checking wallet...');\r\n    const wallet = await sequelize.query(`\r\n      SELECT * FROM wallets WHERE user_id = $1\r\n    `, { \r\n      bind: [user[0].user_id],\r\n      type: Sequelize.QueryTypes.SELECT \r\n    });\r\n\r\n    if (wallet.length === 0) {\r\n      console.log('‚ùå Wallet not found!');\r\n    } else {\r\n      console.log('‚úÖ Wallet found:', wallet[0]);\r\n    }\r\n\r\n    // Check VIP tiers\r\n    console.log('\\nüìã Checking VIP tiers...');\r\n    const vipTiers = await sequelize.query(`\r\n      SELECT * FROM vip_tiers LIMIT 5\r\n    `, { type: Sequelize.QueryTypes.SELECT });\r\n\r\n    if (vipTiers.length === 0) {\r\n      console.log('‚ùå No VIP tiers found in database!');\r\n    } else {\r\n      console.log('‚úÖ VIP tiers found:', vipTiers.length);\r\n      console.log('Sample VIP tier:', vipTiers[0]);\r\n    }\r\n\r\n    // Check if user has VIP tier assigned\r\n    if (userDetails.length > 0) {\r\n      console.log('\\nüìã Checking user VIP tier assignment...');\r\n      const userVipTier = await sequelize.query(`\r\n        SELECT v.* FROM vip_tiers v \r\n        JOIN user_details ud ON v.vip_tier_id = ud.vip_tier_id \r\n        WHERE ud.user_id = $1\r\n      `, { \r\n        bind: [user[0].user_id],\r\n        type: Sequelize.QueryTypes.SELECT \r\n      });\r\n\r\n      if (userVipTier.length === 0) {\r\n        console.log('‚ùå User has no VIP tier assigned!');\r\n        console.log('üí° Need to assign a VIP tier to user_details.vip_tier_id');\r\n      } else {\r\n        console.log('‚úÖ User VIP tier found:', userVipTier[0]);\r\n      }\r\n    }\r\n\r\n    console.log('\\nüéØ Summary:');\r\n    console.log('- User exists:', user.length > 0);\r\n    console.log('- User details exist:', userDetails.length > 0);\r\n    console.log('- Wallet exists:', wallet.length > 0);\r\n    console.log('- VIP tiers exist:', vipTiers.length > 0);\r\n    console.log('- User has VIP tier:', userDetails.length > 0 && userDetails[0].vip_tier_id);\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Error:', error.message);\r\n    console.error('Full error:', error);\r\n  } finally {\r\n    await sequelize.close();\r\n  }\r\n}\r\n\r\ndebugLogin(); "
        }
    ]
}