{
    "sourceFile": "backend/checkAndAddFields.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754046425536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754046425536,
            "name": "Commit-0",
            "content": "const { Sequelize } = require('sequelize');\r\nrequire('dotenv').config();\r\n\r\n// Database connection configuration\r\nconst sequelize = new Sequelize({\r\n  dialect: 'postgres',\r\n  host: process.env.DB_WRITE_HOST || process.env.DB_READ_HOST,\r\n  port: process.env.DB_PORT || 5432,\r\n  username: process.env.DB_USER,\r\n  password: process.env.DB_PASSWORD,\r\n  database: process.env.DB_NAME,\r\n  logging: false\r\n});\r\n\r\nasync function checkAndAddFields() {\r\n  try {\r\n    console.log('üîç Checking database connection...');\r\n    await sequelize.authenticate();\r\n    console.log('‚úÖ Database connected successfully');\r\n\r\n    // Check if google_id column exists\r\n    const googleIdExists = await sequelize.query(\r\n      `SELECT column_name FROM information_schema.columns \r\n       WHERE table_name = 'users' AND column_name = 'google_id'`,\r\n      { type: Sequelize.QueryTypes.SELECT }\r\n    );\r\n\r\n    if (googleIdExists.length === 0) {\r\n      console.log('‚ûï Adding google_id column...');\r\n      await sequelize.query('ALTER TABLE users ADD COLUMN google_id VARCHAR(255)');\r\n      console.log('‚úÖ google_id column added successfully');\r\n    } else {\r\n      console.log('‚úÖ google_id column already exists');\r\n    }\r\n\r\n    // Check if facebook_id column exists\r\n    const facebookIdExists = await sequelize.query(\r\n      `SELECT column_name FROM information_schema.columns \r\n       WHERE table_name = 'users' AND column_name = 'facebook_id'`,\r\n      { type: Sequelize.QueryTypes.SELECT }\r\n    );\r\n\r\n    if (facebookIdExists.length === 0) {\r\n      console.log('‚ûï Adding facebook_id column...');\r\n      await sequelize.query('ALTER TABLE users ADD COLUMN facebook_id VARCHAR(255)');\r\n      console.log('‚úÖ facebook_id column added successfully');\r\n    } else {\r\n      console.log('‚úÖ facebook_id column already exists');\r\n    }\r\n\r\n    // Check if sign_in_type column exists\r\n    const signInTypeExists = await sequelize.query(\r\n      `SELECT column_name FROM information_schema.columns \r\n       WHERE table_name = 'users' AND column_name = 'sign_in_type'`,\r\n      { type: Sequelize.QueryTypes.SELECT }\r\n    );\r\n\r\n    if (signInTypeExists.length === 0) {\r\n      console.log('‚ûï Adding sign_in_type column...');\r\n      await sequelize.query('ALTER TABLE users ADD COLUMN sign_in_type VARCHAR(255)');\r\n      console.log('‚úÖ sign_in_type column added successfully');\r\n    } else {\r\n      console.log('‚úÖ sign_in_type column already exists');\r\n    }\r\n\r\n    // Show current table structure\r\n    console.log('\\nüìã Current users table structure:');\r\n    const columns = await sequelize.query(\r\n      `SELECT column_name, data_type, is_nullable, column_default \r\n       FROM information_schema.columns \r\n       WHERE table_name = 'users' \r\n       ORDER BY ordinal_position`,\r\n      { type: Sequelize.QueryTypes.SELECT }\r\n    );\r\n\r\n    columns.forEach(col => {\r\n      console.log(`   - ${col.column_name}: ${col.data_type} (nullable: ${col.is_nullable})`);\r\n    });\r\n\r\n    console.log('\\nüéâ Database fields check and update completed!');\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Error:', error.message);\r\n    console.error('Full error:', error);\r\n  } finally {\r\n    await sequelize.close();\r\n  }\r\n}\r\n\r\ncheckAndAddFields(); "
        }
    ]
}