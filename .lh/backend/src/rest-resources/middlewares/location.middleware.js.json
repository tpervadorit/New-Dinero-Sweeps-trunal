{
    "sourceFile": "backend/src/rest-resources/middlewares/location.middleware.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754043879310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754043879310,
            "name": "Commit-0",
            "content": "import config from '@src/configs/app.config'\r\nimport { AppError } from '@src/errors/app.error'\r\nimport { Errors } from '@src/errors/errorCodes'\r\nimport axios from 'axios'\r\n\r\nimport validator from 'validator'\r\n\r\nconst restrictedStates = ['US-MI', 'US-ID', 'US-WA', 'US-LA', 'US-NV', 'US-MT', 'US-CT', 'US-HI', 'US-DE']\r\nconst restrictedCountries = ['MX'] // Mexico\r\n\r\n\r\nexport const getClientIp = (req) => {\r\n  if (!req || !req.headers) return null // Prevent errors\r\n\r\n  const ipHeaders = [\r\n    'x-client-ip',\r\n    'cf-connecting-ip',\r\n    'fastly-client-ip',\r\n    'true-client-ip',\r\n    'x-real-ip',\r\n    'x-cluster-client-ip',\r\n    'x-forwarded',\r\n    'x-forwarded-for',\r\n    'forwarded-for',\r\n    'forwarded',\r\n    'x-appengine-user-ip',\r\n    'Cf-Pseudo-IPv4'\r\n  ]\r\n\r\n  for (const header of ipHeaders) {\r\n    if (req.headers[header] && validator.isIP(req.headers[header])) {\r\n      return req.headers[header]\r\n    }\r\n  }\r\n\r\n  // Handle x-forwarded-for (can contain multiple IPs)\r\n  if (req.headers['x-forwarded-for']) {\r\n    const xForwardedFor = req.headers['x-forwarded-for'].split(',')[0].trim()\r\n    if (validator.isIP(xForwardedFor)) {\r\n      return xForwardedFor\r\n    }\r\n  }\r\n\r\n  // Check other request properties\r\n  if (req.connection?.remoteAddress && validator.isIP(req.connection.remoteAddress)) {\r\n    return req.connection.remoteAddress\r\n  }\r\n\r\n  if (req.socket?.remoteAddress && validator.isIP(req.socket.remoteAddress)) {\r\n    return req.socket.remoteAddress\r\n  }\r\n\r\n  if (req.connection?.socket?.remoteAddress && validator.isIP(req.connection.socket.remoteAddress)) {\r\n    return req.connection.socket.remoteAddress\r\n  }\r\n\r\n  if (req.info?.remoteAddress && validator.isIP(req.info.remoteAddress)) {\r\n    return req.info.remoteAddress\r\n  }\r\n\r\n  if (req.requestContext?.identity?.sourceIp && validator.isIP(req.requestContext.identity.sourceIp)) {\r\n    return req.requestContext.identity.sourceIp\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport function geoBlock () {\r\n  return async function (req, res, next) {\r\n    try {\r\n      // console.log(\"request header\",req.headers);\r\n\r\n      const ip = await getClientIp(req)\r\n\r\n      if (!ip) return next(new AppError(Errors.IP_NOT_FOUND))\r\n\r\n      const geoApiBaseUrl = config.get('geoapi.url')\r\n      const geoApiKey = config.get('geoapi.apikey')\r\n\r\n      const geoApiUrl = `${geoApiBaseUrl}?apiKey=${geoApiKey}&ip=${ip}`\r\n      const response = await axios.get(geoApiUrl)\r\n      const state = response.data.state_code\r\n      const country = response.data.country_code2\r\n      \r\n      // Check if state is restricted\r\n      if (restrictedStates.includes(state)) {\r\n        return next(new AppError(Errors.GEO_BLOCKED_LOCATION))\r\n      }\r\n      \r\n      // Check if country is restricted (Mexico)\r\n      if (restrictedCountries.includes(country)) {\r\n        return next(new AppError(Errors.GEO_BLOCKED_LOCATION))\r\n      }\r\n\r\n      next()\r\n    } catch (error) {\r\n      console.error('Error fetching geolocation data:', error)\r\n      next(new AppError(Errors.PERMISSION_DENIED))\r\n    }\r\n  }\r\n}\r\n"
        }
    ]
}