{
    "sourceFile": "backend/src/rest-resources/middlewares/geoVpnBlock.middleware.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1753424552645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753424930049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n const geoip = require('geoip-lite');\r\n const axios = require('axios');\r\n \r\n-const blockedCountries = ['US', 'GB', 'FR']; // Example blocked countries\r\n+const blockedCountries = ['US', 'IND', 'FR']; // Example blocked countries\r\n \r\n async function geoVpnBlockMiddleware(req, res, next) {\r\n   const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\r\n   const geo = geoip.lookup(ip);\r\n"
                },
                {
                    "date": 1753447809596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,33 +1,51 @@\n-const geoip = require('geoip-lite');\r\n const axios = require('axios');\r\n+const blockedRegions = [\r\n+  { country: 'US', state: 'MI' }, // Michigan\r\n+  { country: 'US', state: 'ID' }, // Idaho\r\n+  { country: 'US', state: 'WA' }, // Washington\r\n+  { country: 'US', state: 'LA' }, // Louisiana\r\n+  { country: 'US', state: 'NV' }, // Nevada\r\n+  { country: 'US', state: 'MT' }, // Montana\r\n+  { country: 'US', state: 'CT' }, // Connecticut\r\n+  { country: 'US', state: 'HI' }, // Hawaii\r\n+  { country: 'US', state: 'DE' }, // Delaware\r\n+];\r\n+const blockedCountries = ['MX']; // Mexico\r\n \r\n-const blockedCountries = ['US', 'IND', 'FR']; // Example blocked countries\r\n-\r\n async function geoVpnBlockMiddleware(req, res, next) {\r\n   const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\r\n-  const geo = geoip.lookup(ip);\r\n+  const geoApiKey = process.env.IPGEO_API_KEY; // Get a free key from ipgeolocation.io\r\n \r\n-  // Block by country\r\n-  if (geo && blockedCountries.includes(geo.country)) {\r\n-    return res.status(403).json({ error: 'Access from your country is not allowed.' });\r\n-  }\r\n+  try {\r\n+    // Get geo info\r\n+    const geoRes = await axios.get(`https://api.ipgeolocation.io/ipgeo?apiKey=${geoApiKey}&ip=${ip}`);\r\n+    const { country_code2, state_prov } = geoRes.data;\r\n \r\n-  // VPN/Proxy check\r\n-  const apiKey = process.env.IPQUALITYSCORE_API_KEY;\r\n-  if (apiKey) {\r\n-    const url = `https://ipqualityscore.com/api/json/ip/${apiKey}/${ip}`;\r\n-    try {\r\n-      const { data } = await axios.get(url);\r\n+    // Block by country\r\n+    if (blockedCountries.includes(country_code2)) {\r\n+      return res.status(403).json({ error: 'Access from your country is not allowed.' });\r\n+    }\r\n+\r\n+    // Block by US state\r\n+    if (country_code2 === 'US' && blockedRegions.some(r => r.state === state_prov)) {\r\n+      return res.status(403).json({ error: 'Access from your state is not allowed.' });\r\n+    }\r\n+\r\n+    // VPN/Proxy check (as before)\r\n+    const vpnApiKey = process.env.IPQUALITYSCORE_API_KEY;\r\n+    if (vpnApiKey) {\r\n+      const vpnUrl = `https://ipqualityscore.com/api/json/ip/${vpnApiKey}/${ip}`;\r\n+      const { data } = await axios.get(vpnUrl);\r\n       if (data.vpn || data.proxy || data.tor) {\r\n         return res.status(403).json({ error: 'VPN/Proxy detected. Please disable it to access the service.' });\r\n       }\r\n-    } catch (err) {\r\n-      // Optionally log error, but don't block if API fails\r\n-      console.error('VPN check failed:', err.message);\r\n     }\r\n+\r\n+    next();\r\n+  } catch (err) {\r\n+    console.error('Geo/VPN check failed:', err.message);\r\n+    next(); // Optionally block on error, or allow\r\n   }\r\n-\r\n-  next();\r\n }\r\n \r\n module.exports = geoVpnBlockMiddleware; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1753448954861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n const axios = require('axios');\r\n const blockedRegions = [\r\n   { country: 'US', state: 'MI' }, // Michigan\r\n+  { country: 'US', state: 'MI' }, // Michigan\r\n   { country: 'US', state: 'ID' }, // Idaho\r\n   { country: 'US', state: 'WA' }, // Washington\r\n   { country: 'US', state: 'LA' }, // Louisiana\r\n   { country: 'US', state: 'NV' }, // Nevada\r\n"
                },
                {
                    "date": 1753448960672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n const axios = require('axios');\r\n const blockedRegions = [\r\n+  { country: '', state: 'MI' }, // Michigan\r\n   { country: 'US', state: 'MI' }, // Michigan\r\n-  { country: 'US', state: 'MI' }, // Michigan\r\n   { country: 'US', state: 'ID' }, // Idaho\r\n   { country: 'US', state: 'WA' }, // Washington\r\n   { country: 'US', state: 'LA' }, // Louisiana\r\n   { country: 'US', state: 'NV' }, // Nevada\r\n"
                },
                {
                    "date": 1753448967788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n const axios = require('axios');\r\n const blockedRegions = [\r\n-  { country: '', state: 'MI' }, // Michigan\r\n+  { country: 'IND', state: '' }, // Maharashtra\r\n   { country: 'US', state: 'MI' }, // Michigan\r\n   { country: 'US', state: 'ID' }, // Idaho\r\n   { country: 'US', state: 'WA' }, // Washington\r\n   { country: 'US', state: 'LA' }, // Louisiana\r\n"
                },
                {
                    "date": 1753448975480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,13 @@\n const axios = require('axios');\r\n const blockedRegions = [\r\n-  { country: 'IND', state: '' }, // Maharashtra\r\n+  { country: 'IND', state: 'GJ' }, // Gujarat\r\n+  { country: 'IND', state: 'MH' }, // Maharashtra\r\n+  { country: 'IND', state: 'TN' }, // Tamil Nadu\r\n+  { country: 'IND', state: 'KA' }, // Karnataka\r\n+  { country: 'IND', state: 'AP' }, // Andhra Pradesh\r\n+  { country: 'IND', state: 'KL' }, // Kerala\r\n+  { country: 'IND', state: 'UP' }, // Uttar Pradesh\r\n   { country: 'US', state: 'MI' }, // Michigan\r\n   { country: 'US', state: 'ID' }, // Idaho\r\n   { country: 'US', state: 'WA' }, // Washington\r\n   { country: 'US', state: 'LA' }, // Louisiana\r\n"
                },
                {
                    "date": 1753449042736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,7 @@\n const axios = require('axios');\r\n const blockedRegions = [\r\n-  { country: 'IND', state: 'GJ' }, // Gujarat\r\n-  { country: 'IND', state: 'MH' }, // Maharashtra\r\n-  { country: 'IND', state: 'TN' }, // Tamil Nadu\r\n-  { country: 'IND', state: 'KA' }, // Karnataka\r\n-  { country: 'IND', state: 'AP' }, // Andhra Pradesh\r\n-  { country: 'IND', state: 'KL' }, // Kerala\r\n-  { country: 'IND', state: 'UP' }, // Uttar Pradesh\r\n+  // { country: 'IND', state: 'GJ' }, // Maharashtra\r\n   { country: 'US', state: 'MI' }, // Michigan\r\n   { country: 'US', state: 'ID' }, // Idaho\r\n   { country: 'US', state: 'WA' }, // Washington\r\n   { country: 'US', state: 'LA' }, // Louisiana\r\n"
                },
                {
                    "date": 1753450217550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n   { country: 'US', state: 'CT' }, // Connecticut\r\n   { country: 'US', state: 'HI' }, // Hawaii\r\n   { country: 'US', state: 'DE' }, // Delaware\r\n ];\r\n-const blockedCountries = ['MX']; // Mexico\r\n \r\n async function geoVpnBlockMiddleware(req, res, next) {\r\n   const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\r\n   const geoApiKey = process.env.IPGEO_API_KEY; // Get a free key from ipgeolocation.io\r\n"
                },
                {
                    "date": 1753450250944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,51 +1,52 @@\n-const axios = require('axios');\r\n-const blockedRegions = [\r\n-  // { country: 'IND', state: 'GJ' }, // Maharashtra\r\n-  { country: 'US', state: 'MI' }, // Michigan\r\n-  { country: 'US', state: 'ID' }, // Idaho\r\n-  { country: 'US', state: 'WA' }, // Washington\r\n-  { country: 'US', state: 'LA' }, // Louisiana\r\n-  { country: 'US', state: 'NV' }, // Nevada\r\n-  { country: 'US', state: 'MT' }, // Montana\r\n-  { country: 'US', state: 'CT' }, // Connecticut\r\n-  { country: 'US', state: 'HI' }, // Hawaii\r\n-  { country: 'US', state: 'DE' }, // Delaware\r\n-];\r\n-\r\n-async function geoVpnBlockMiddleware(req, res, next) {\r\n-  const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\r\n-  const geoApiKey = process.env.IPGEO_API_KEY; // Get a free key from ipgeolocation.io\r\n-\r\n-  try {\r\n-    // Get geo info\r\n-    const geoRes = await axios.get(`https://api.ipgeolocation.io/ipgeo?apiKey=${geoApiKey}&ip=${ip}`);\r\n-    const { country_code2, state_prov } = geoRes.data;\r\n-\r\n-    // Block by country\r\n-    if (blockedCountries.includes(country_code2)) {\r\n-      return res.status(403).json({ error: 'Access from your country is not allowed.' });\r\n-    }\r\n-\r\n-    // Block by US state\r\n-    if (country_code2 === 'US' && blockedRegions.some(r => r.state === state_prov)) {\r\n-      return res.status(403).json({ error: 'Access from your state is not allowed.' });\r\n-    }\r\n-\r\n-    // VPN/Proxy check (as before)\r\n-    const vpnApiKey = process.env.IPQUALITYSCORE_API_KEY;\r\n-    if (vpnApiKey) {\r\n-      const vpnUrl = `https://ipqualityscore.com/api/json/ip/${vpnApiKey}/${ip}`;\r\n-      const { data } = await axios.get(vpnUrl);\r\n-      if (data.vpn || data.proxy || data.tor) {\r\n-        return res.status(403).json({ error: 'VPN/Proxy detected. Please disable it to access the service.' });\r\n-      }\r\n-    }\r\n-\r\n-    next();\r\n-  } catch (err) {\r\n-    console.error('Geo/VPN check failed:', err.message);\r\n-    next(); // Optionally block on error, or allow\r\n-  }\r\n-}\r\n-\r\n+const axios = require('axios');\n+const blockedRegions = [\n+  // { country: 'IND', state: 'GJ' }, // Maharashtra\n+  { country: 'US', state: 'MI' }, // Michigan\n+  { country: 'US', state: 'ID' }, // Idaho\n+  { country: 'US', state: 'WA' }, // Washington\n+  { country: 'US', state: 'LA' }, // Louisiana\n+  { country: 'US', state: 'NV' }, // Nevada\n+  { country: 'US', state: 'MT' }, // Montana\n+  { country: 'US', state: 'CT' }, // Connecticut\n+  { country: 'US', state: 'HI' }, // Hawaii\n+  { country: 'US', state: 'DE' }, // Delaware\n+];\n+const blockedCountries = ['MX']; // Mexico\n+\n+async function geoVpnBlockMiddleware(req, res, next) {\n+  const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n+  const geoApiKey = process.env.IPGEO_API_KEY; // Get a free key from ipgeolocation.io\n+\n+  try {\n+    // Get geo info\n+    const geoRes = await axios.get(`https://api.ipgeolocation.io/ipgeo?apiKey=${geoApiKey}&ip=${ip}`);\n+    const { country_code2, state_prov } = geoRes.data;\n+\n+    // Block by country\n+    if (blockedCountries.includes(country_code2)) {\n+      return res.status(403).json({ error: 'Access from your country is not allowed.' });\n+    }\n+\n+    // Block by US state\n+    if (country_code2 === 'US' && blockedRegions.some(r => r.state === state_prov)) {\n+      return res.status(403).json({ error: 'Access from your state is not allowed.' });\n+    }\n+\n+    // VPN/Proxy check (as before)\n+    const vpnApiKey = process.env.IPQUALITYSCORE_API_KEY;\n+    if (vpnApiKey) {\n+      const vpnUrl = `https://ipqualityscore.com/api/json/ip/${vpnApiKey}/${ip}`;\n+      const { data } = await axios.get(vpnUrl);\n+      if (data.vpn || data.proxy || data.tor) {\n+        return res.status(403).json({ error: 'VPN/Proxy detected. Please disable it to access the service.' });\n+      }\n+    }\n+\n+    next();\n+  } catch (err) {\n+    console.error('Geo/VPN check failed:', err.message);\n+    next(); // Optionally block on error, or allow\n+  }\n+}\n+\n module.exports = geoVpnBlockMiddleware; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1753450337292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,24 @@\n const axios = require('axios');\n+// Proton VPN Free supports US, NL (Netherlands), JP (Japan)\n+// For testing, block all US states and NL, JP countries\n const blockedRegions = [\n-  // { country: 'IND', state: 'GJ' }, // Maharashtra\n-  { country: 'US', state: 'MI' }, // Michigan\n-  { country: 'US', state: 'ID' }, // Idaho\n-  { country: 'US', state: 'WA' }, // Washington\n-  { country: 'US', state: 'LA' }, // Louisiana\n-  { country: 'US', state: 'NV' }, // Nevada\n-  { country: 'US', state: 'MT' }, // Montana\n-  { country: 'US', state: 'CT' }, // Connecticut\n-  { country: 'US', state: 'HI' }, // Hawaii\n-  { country: 'US', state: 'DE' }, // Delaware\n+  // Block all US states for testing\n+  { country: 'US', state: 'AL' }, { country: 'US', state: 'AK' }, { country: 'US', state: 'AZ' }, { country: 'US', state: 'AR' },\n+  { country: 'US', state: 'CA' }, { country: 'US', state: 'CO' }, { country: 'US', state: 'CT' }, { country: 'US', state: 'DE' },\n+  { country: 'US', state: 'FL' }, { country: 'US', state: 'GA' }, { country: 'US', state: 'HI' }, { country: 'US', state: 'ID' },\n+  { country: 'US', state: 'IL' }, { country: 'US', state: 'IN' }, { country: 'US', state: 'IA' }, { country: 'US', state: 'KS' },\n+  { country: 'US', state: 'KY' }, { country: 'US', state: 'LA' }, { country: 'US', state: 'ME' }, { country: 'US', state: 'MD' },\n+  { country: 'US', state: 'MA' }, { country: 'US', state: 'MI' }, { country: 'US', state: 'MN' }, { country: 'US', state: 'MS' },\n+  { country: 'US', state: 'MO' }, { country: 'US', state: 'MT' }, { country: 'US', state: 'NE' }, { country: 'US', state: 'NV' },\n+  { country: 'US', state: 'NH' }, { country: 'US', state: 'NJ' }, { country: 'US', state: 'NM' }, { country: 'US', state: 'NY' },\n+  { country: 'US', state: 'NC' }, { country: 'US', state: 'ND' }, { country: 'US', state: 'OH' }, { country: 'US', state: 'OK' },\n+  { country: 'US', state: 'OR' }, { country: 'US', state: 'PA' }, { country: 'US', state: 'RI' }, { country: 'US', state: 'SC' },\n+  { country: 'US', state: 'SD' }, { country: 'US', state: 'TN' }, { country: 'US', state: 'TX' }, { country: 'US', state: 'UT' },\n+  { country: 'US', state: 'VT' }, { country: 'US', state: 'VA' }, { country: 'US', state: 'WA' }, { country: 'US', state: 'WV' },\n+  { country: 'US', state: 'WI' }, { country: 'US', state: 'WY' }\n ];\n-const blockedCountries = ['MX']; // Mexico\n+const blockedCountries = ['NL', 'JP']; // Block Netherlands and Japan for Proton VPN free\n \n async function geoVpnBlockMiddleware(req, res, next) {\n   const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n   const geoApiKey = process.env.IPGEO_API_KEY; // Get a free key from ipgeolocation.io\n"
                },
                {
                    "date": 1753450687118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n   { country: 'US', state: 'WI' }, { country: 'US', state: 'WY' }\n ];\n const blockedCountries = ['NL', 'JP']; // Block Netherlands and Japan for Proton VPN free\n \n-async function geoVpnBlockMiddleware(req, res, next) {\n+async function geoVpnBlockMiddleware(req, res, next) {}\n   const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n   const geoApiKey = process.env.IPGEO_API_KEY; // Get a free key from ipgeolocation.io\n \n   try {\n"
                }
            ],
            "date": 1753424552645,
            "name": "Commit-0",
            "content": "const geoip = require('geoip-lite');\r\nconst axios = require('axios');\r\n\r\nconst blockedCountries = ['US', 'GB', 'FR']; // Example blocked countries\r\n\r\nasync function geoVpnBlockMiddleware(req, res, next) {\r\n  const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\r\n  const geo = geoip.lookup(ip);\r\n\r\n  // Block by country\r\n  if (geo && blockedCountries.includes(geo.country)) {\r\n    return res.status(403).json({ error: 'Access from your country is not allowed.' });\r\n  }\r\n\r\n  // VPN/Proxy check\r\n  const apiKey = process.env.IPQUALITYSCORE_API_KEY;\r\n  if (apiKey) {\r\n    const url = `https://ipqualityscore.com/api/json/ip/${apiKey}/${ip}`;\r\n    try {\r\n      const { data } = await axios.get(url);\r\n      if (data.vpn || data.proxy || data.tor) {\r\n        return res.status(403).json({ error: 'VPN/Proxy detected. Please disable it to access the service.' });\r\n      }\r\n    } catch (err) {\r\n      // Optionally log error, but don't block if API fails\r\n      console.error('VPN check failed:', err.message);\r\n    }\r\n  }\r\n\r\n  next();\r\n}\r\n\r\nmodule.exports = geoVpnBlockMiddleware; "
        }
    ]
}