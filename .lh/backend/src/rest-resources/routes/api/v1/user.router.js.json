{
    "sourceFile": "backend/src/rest-resources/routes/api/v1/user.router.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1753424564150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753935373904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n import { isUserAuthenticated } from '@src/rest-resources/middlewares/isUserAuthenticated'\n import { geoBlock } from '@src/rest-resources/middlewares/location.middleware'\n import { uploadSingle } from '@src/rest-resources/middlewares/multer.middleware'\n import requestValidationMiddleware from '@src/rest-resources/middlewares/requestValidation.middleware'\n-const geoVpnBlockMiddleware = require('../../middlewares/geoVpnBlock.middleware');\n+import geoVpnBlockMiddleware from '@src/rest-resources/middlewares/geoVpnBlock.middleware'\n \n // const upload = multer()\n const args = { mergeParams: true }\n const userRouter = express.Router(args)\n"
                },
                {
                    "date": 1754043679855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,126 +1,126 @@\n-// import multer from 'multer'\n-import express from 'express'\n-\n-import BonusController from '@src/rest-resources/controllers/bonus.controller'\n-import UserController from '@src/rest-resources/controllers/user.controller'\n-// import { CasinoController } from '@src/rest-resources/controllers/casino.controller'\n-import AffiliateController from '@src/rest-resources/controllers/affiliate.controller'\n-import contextMiddleware from '@src/rest-resources/middlewares/context.middleware'\n-// import { validateSignature } from '@src/rest-resources/middlewares/validateSignature'\n-import { getAllBonusSchema } from '@src/json-schemas/user/getAllBonus.schema'\n-import { getOtpSchema } from '@src/json-schemas/user/getOtp.schema'\n-import { getReferredUsersSchema } from '@src/json-schemas/user/getReferredUsers.schema'\n-import { getUserBonusSchema } from '@src/json-schemas/user/getUserBonus.schema'\n-import { getUserDetailsSchema } from '@src/json-schemas/user/getUserDetails.schema'\n-import { getUserTransactionsSchema } from '@src/json-schemas/user/getUserTransactions.schema'\n-import { setDefaultWalletSchema } from '@src/json-schemas/user/setDefaultWallet.schema'\n-import { updateSelfExclusionSchema } from '@src/json-schemas/user/updateSelfExlusion.schema'\n-import { updateUserDetailsSchema } from '@src/json-schemas/user/updateUserDetails.schema'\n-import { userLoginSchema } from '@src/json-schemas/user/userLogin.schema'\n-import { userSignUpSchema } from '@src/json-schemas/user/userSignUp.schema'\n-import { verifyEmailSchema } from '@src/json-schemas/user/verifyEmail.schema'\n-import { verifyForgotPasswordSchema } from '@src/json-schemas/user/verifyForgotPasswordSchema'\n-import { verifyOtpSchema } from '@src/json-schemas/user/verifyOtp.schema'\n-import { getAllWithdrawRequestSchema } from '@src/json-schemas/wallet/getAllWithdrawRequests'\n-import { isUserAuthenticated } from '@src/rest-resources/middlewares/isUserAuthenticated'\n-import { geoBlock } from '@src/rest-resources/middlewares/location.middleware'\n-import { uploadSingle } from '@src/rest-resources/middlewares/multer.middleware'\n-import requestValidationMiddleware from '@src/rest-resources/middlewares/requestValidation.middleware'\n-import geoVpnBlockMiddleware from '@src/rest-resources/middlewares/geoVpnBlock.middleware'\n-\n-// const upload = multer()\n-const args = { mergeParams: true }\n-const userRouter = express.Router(args)\n-\n-// Public Routes\n-userRouter.route('/sign-up').post(geoVpnBlockMiddleware, geoBlock(), requestValidationMiddleware(userSignUpSchema), contextMiddleware(true), UserController.userSignUp)\n-userRouter.route('/login').post(geoVpnBlockMiddleware, requestValidationMiddleware(userLoginSchema), contextMiddleware(false), UserController.userLogin)\n-\n-userRouter.route('/verify-email').get(requestValidationMiddleware(verifyEmailSchema), contextMiddleware(true), UserController.verifyEmail)\n-\n-// Referral routes\n-userRouter.route('/referred-users').get(contextMiddleware(false), isUserAuthenticated, requestValidationMiddleware(getReferredUsersSchema), AffiliateController.getReferredUsers)\n-\n-// tg-casino routes\n-userRouter.route('/transactions').get(contextMiddleware(false), isUserAuthenticated, requestValidationMiddleware(getUserTransactionsSchema), UserController.getUserTransactions)\n-userRouter.route('/set-default').post(contextMiddleware(true), requestValidationMiddleware(setDefaultWalletSchema), isUserAuthenticated, UserController.setDefaultWallet)\n-userRouter.route('/').get(requestValidationMiddleware(getUserDetailsSchema), isUserAuthenticated, UserController.getUserDetails)\n-\n-userRouter.route('/logout').post(contextMiddleware(false), isUserAuthenticated, UserController.userLogout)\n-userRouter.route('/update-user').put(contextMiddleware(true), uploadSingle('profileImage'), requestValidationMiddleware(updateUserDetailsSchema), isUserAuthenticated, UserController.updateUserDetails)\n-userRouter.route('/withdraw-request')\n-  // .post(contextMiddleware(true), requestValidationMiddleware(createWithdrawRequestSchema), isUserAuthenticated, UserController.createWithdrawRequest)\n-  .get(contextMiddleware(false), requestValidationMiddleware(getAllWithdrawRequestSchema), isUserAuthenticated, UserController.getWithdrawRequests)\n-\n-userRouter.route('/get-otp').get(contextMiddleware(false), requestValidationMiddleware(getOtpSchema), isUserAuthenticated, UserController.getOtp)\n-userRouter.route('/verify-otp').put(contextMiddleware(true), requestValidationMiddleware(verifyOtpSchema), isUserAuthenticated, UserController.verifyOtp)\n-\n-\n-// Veriff kyc verification\n-userRouter.route('/init-veriff-kyc').get(contextMiddleware(true), isUserAuthenticated, requestValidationMiddleware({}), UserController.createVeriffSession)\n-userRouter.route('/veriff-callback').post(contextMiddleware(true), requestValidationMiddleware({}), UserController.veriffCallback)\n-\n-\n-// userRouter.route('/upate-user').post(contextMiddleware(false), isUserAuthenticated, UserController.userSignUp)\n-userRouter.route('/verify-forget-password').post(contextMiddleware(true), requestValidationMiddleware(verifyForgotPasswordSchema), UserController.verifyForgetPassword)\n-\n-userRouter.route('/change-password').put(contextMiddleware(true), isUserAuthenticated, UserController.changePassword)\n-\n-userRouter.route('/forget-password').post(contextMiddleware(true), UserController.forgetPassword)\n-\n-// userRouter.route('/get-current-winners').get(contextMiddleware(false), UserController.getCurrentWinners)\n-\n-// userRouter.route('/refresh-email-token').post(contextMiddleware(true), UserController.refreshEmailToken)\n-\n-// userRouter.route('/check-unique-constraints').get(contextMiddleware(false), UserController.checkEmailUsername)\n-\n-// Microservice Routes\n-\n-// userRouter.route('/cancel-free-spins').post(contextMiddleware(false), validateSignature, UserController.cancelFreespins)\n-\n-// Private Routes\n-\n-// userRouter.route('/set-loss-limit').post(contextMiddleware(false), isUserAuthenticated, UserController.setLossLimit)\n-\n-// userRouter.route('/get-limit-table').get(contextMiddleware(false), isUserAuthenticated, UserController.getLimitTable)\n-\n-// userRouter.route('/set-daily-limit').post(contextMiddleware(false), isUserAuthenticated, UserController.setDailyLimit)\n-\n-// userRouter.route('/set-session-time').post(contextMiddleware(false), isUserAuthenticated, UserController.setTimeLimit)\n-\n-// userRouter.route('/set-deposit-limit').post(contextMiddleware(false), isUserAuthenticated, UserController.setDepositLimit)\n-\n-// userRouter.route('/set-disable-until').post(contextMiddleware(false), isUserAuthenticated, UserController.setDisableUntil)\n-\n-// userRouter.route('/get-loyalty-details').get(contextMiddleware(false), isUserAuthenticated, UserController.getLoyaltyDetails)\n-\n-// userRouter.route('/remove-profile-image').put(contextMiddleware(false), isUserAuthenticated, UserController.removeProfileImage)\n-\n-// userRouter.route('/get-withdraw-requests').get(contextMiddleware(false), isUserAuthenticated, UserController.getWithdrawRequests)\n-\n-// userRouter.route('/remove-favorite').delete(contextMiddleware(true), isUserAuthenticated, CasinoController.removeFavoriteGame)\n-\n-// userRouter.route('/favorite-games').get(contextMiddleware(false), isUserAuthenticated, CasinoController.getFavoriteGame)\n-\n-// userRouter.route('/upload-profile-image').put(contextMiddleware(false), upload.single('profileImage'), isUserAuthenticated, UserController.uploadProfileImage)\n-\n-// userRouter.route('/wallet-amount').get(contextMiddleware(false), isUserAuthenticated, UserController.walletAmount)\n-\n-// userRouter.route('/upload-huawei-image').post(contextMiddleware(false), upload.single('image'), isUserAuthenticated, UserController.uploadImage)\n-\n-// userRouter.route('/currency-code').put(contextMiddleware(false), isUserAuthenticated, UserController.updateCurrencyCode)\n-\n-userRouter.route('/self-exclusion').put(contextMiddleware(true), requestValidationMiddleware(updateSelfExclusionSchema), isUserAuthenticated, UserController.updateSelfExclusion)\n-\n-// userRouter.route('/ghost-mode').put(contextMiddleware(true), isUserAuthenticated, UserController.updateGhostMode)\n-\n-// Bonus APIs\n-userRouter.route('/user-bonus').get(contextMiddleware(false), isUserAuthenticated, requestValidationMiddleware(getUserBonusSchema), BonusController.getUserBonus)\n-userRouter.route('/get-all-bonus').get(requestValidationMiddleware(getAllBonusSchema), isUserAuthenticated, BonusController.getAllBonus)\n-\n-// userRouter.route('/avail-bonus').post(contextMiddleware(true), requestValidationMiddleware(availBonusSchema), isUserAuthenticated, BonusController.availBonus)\n-// userRouter.route('/cancel-bonus').put(contextMiddleware(true), requestValidationMiddleware(cancelBonusSchema), isUserAuthenticated, BonusController.cancelBonus)\n-// userRouter.route('/bonus-detail').get(requestValidationMiddleware(getBonusDetailSchema), isUserAuthenticated, BonusController.getBonusDetail)\n-\n-\n-export { userRouter }\n+// import multer from 'multer'\r\n+import express from 'express'\r\n+\r\n+import BonusController from '@src/rest-resources/controllers/bonus.controller'\r\n+import UserController from '@src/rest-resources/controllers/user.controller'\r\n+// import { CasinoController } from '@src/rest-resources/controllers/casino.controller'\r\n+import AffiliateController from '@src/rest-resources/controllers/affiliate.controller'\r\n+import contextMiddleware from '@src/rest-resources/middlewares/context.middleware'\r\n+// import { validateSignature } from '@src/rest-resources/middlewares/validateSignature'\r\n+import { getAllBonusSchema } from '@src/json-schemas/user/getAllBonus.schema'\r\n+import { getOtpSchema } from '@src/json-schemas/user/getOtp.schema'\r\n+import { getReferredUsersSchema } from '@src/json-schemas/user/getReferredUsers.schema'\r\n+import { getUserBonusSchema } from '@src/json-schemas/user/getUserBonus.schema'\r\n+import { getUserDetailsSchema } from '@src/json-schemas/user/getUserDetails.schema'\r\n+import { getUserTransactionsSchema } from '@src/json-schemas/user/getUserTransactions.schema'\r\n+import { setDefaultWalletSchema } from '@src/json-schemas/user/setDefaultWallet.schema'\r\n+import { updateSelfExclusionSchema } from '@src/json-schemas/user/updateSelfExlusion.schema'\r\n+import { updateUserDetailsSchema } from '@src/json-schemas/user/updateUserDetails.schema'\r\n+import { userLoginSchema } from '@src/json-schemas/user/userLogin.schema'\r\n+import { userSignUpSchema } from '@src/json-schemas/user/userSignUp.schema'\r\n+import { verifyEmailSchema } from '@src/json-schemas/user/verifyEmail.schema'\r\n+import { verifyForgotPasswordSchema } from '@src/json-schemas/user/verifyForgotPasswordSchema'\r\n+import { verifyOtpSchema } from '@src/json-schemas/user/verifyOtp.schema'\r\n+import { getAllWithdrawRequestSchema } from '@src/json-schemas/wallet/getAllWithdrawRequests'\r\n+import { isUserAuthenticated } from '@src/rest-resources/middlewares/isUserAuthenticated'\r\n+import { geoBlock } from '@src/rest-resources/middlewares/location.middleware'\r\n+import { uploadSingle } from '@src/rest-resources/middlewares/multer.middleware'\r\n+import requestValidationMiddleware from '@src/rest-resources/middlewares/requestValidation.middleware'\r\n+import geoVpnBlockMiddleware from '@src/rest-resources/middlewares/geoVpnBlock.middleware'\r\n+\r\n+// const upload = multer()\r\n+const args = { mergeParams: true }\r\n+const userRouter = express.Router(args)\r\n+\r\n+// Public Routes\r\n+userRouter.route('/sign-up').post(geoVpnBlockMiddleware, requestValidationMiddleware(userSignUpSchema), contextMiddleware(true), UserController.userSignUp)\r\n+userRouter.route('/login').post(geoVpnBlockMiddleware, requestValidationMiddleware(userLoginSchema), contextMiddleware(false), UserController.userLogin)\r\n+\r\n+userRouter.route('/verify-email').get(requestValidationMiddleware(verifyEmailSchema), contextMiddleware(true), UserController.verifyEmail)\r\n+\r\n+// Referral routes\r\n+userRouter.route('/referred-users').get(contextMiddleware(false), isUserAuthenticated, requestValidationMiddleware(getReferredUsersSchema), AffiliateController.getReferredUsers)\r\n+\r\n+// tg-casino routes\r\n+userRouter.route('/transactions').get(contextMiddleware(false), isUserAuthenticated, requestValidationMiddleware(getUserTransactionsSchema), UserController.getUserTransactions)\r\n+userRouter.route('/set-default').post(contextMiddleware(true), requestValidationMiddleware(setDefaultWalletSchema), isUserAuthenticated, UserController.setDefaultWallet)\r\n+userRouter.route('/').get(requestValidationMiddleware(getUserDetailsSchema), isUserAuthenticated, UserController.getUserDetails)\r\n+\r\n+userRouter.route('/logout').post(contextMiddleware(false), isUserAuthenticated, UserController.userLogout)\r\n+userRouter.route('/update-user').put(contextMiddleware(true), uploadSingle('profileImage'), requestValidationMiddleware(updateUserDetailsSchema), isUserAuthenticated, UserController.updateUserDetails)\r\n+userRouter.route('/withdraw-request')\r\n+  // .post(contextMiddleware(true), requestValidationMiddleware(createWithdrawRequestSchema), isUserAuthenticated, UserController.createWithdrawRequest)\r\n+  .get(contextMiddleware(false), requestValidationMiddleware(getAllWithdrawRequestSchema), isUserAuthenticated, UserController.getWithdrawRequests)\r\n+\r\n+userRouter.route('/get-otp').get(contextMiddleware(false), requestValidationMiddleware(getOtpSchema), isUserAuthenticated, UserController.getOtp)\r\n+userRouter.route('/verify-otp').put(contextMiddleware(true), requestValidationMiddleware(verifyOtpSchema), isUserAuthenticated, UserController.verifyOtp)\r\n+\r\n+\r\n+// Veriff kyc verification\r\n+userRouter.route('/init-veriff-kyc').get(contextMiddleware(true), isUserAuthenticated, requestValidationMiddleware({}), UserController.createVeriffSession)\r\n+userRouter.route('/veriff-callback').post(contextMiddleware(true), requestValidationMiddleware({}), UserController.veriffCallback)\r\n+\r\n+\r\n+// userRouter.route('/upate-user').post(contextMiddleware(false), isUserAuthenticated, UserController.userSignUp)\r\n+userRouter.route('/verify-forget-password').post(contextMiddleware(true), requestValidationMiddleware(verifyForgotPasswordSchema), UserController.verifyForgetPassword)\r\n+\r\n+userRouter.route('/change-password').put(contextMiddleware(true), isUserAuthenticated, UserController.changePassword)\r\n+\r\n+userRouter.route('/forget-password').post(contextMiddleware(true), UserController.forgetPassword)\r\n+\r\n+// userRouter.route('/get-current-winners').get(contextMiddleware(false), UserController.getCurrentWinners)\r\n+\r\n+// userRouter.route('/refresh-email-token').post(contextMiddleware(true), UserController.refreshEmailToken)\r\n+\r\n+// userRouter.route('/check-unique-constraints').get(contextMiddleware(false), UserController.checkEmailUsername)\r\n+\r\n+// Microservice Routes\r\n+\r\n+// userRouter.route('/cancel-free-spins').post(contextMiddleware(false), validateSignature, UserController.cancelFreespins)\r\n+\r\n+// Private Routes\r\n+\r\n+// userRouter.route('/set-loss-limit').post(contextMiddleware(false), isUserAuthenticated, UserController.setLossLimit)\r\n+\r\n+// userRouter.route('/get-limit-table').get(contextMiddleware(false), isUserAuthenticated, UserController.getLimitTable)\r\n+\r\n+// userRouter.route('/set-daily-limit').post(contextMiddleware(false), isUserAuthenticated, UserController.setDailyLimit)\r\n+\r\n+// userRouter.route('/set-session-time').post(contextMiddleware(false), isUserAuthenticated, UserController.setTimeLimit)\r\n+\r\n+// userRouter.route('/set-deposit-limit').post(contextMiddleware(false), isUserAuthenticated, UserController.setDepositLimit)\r\n+\r\n+// userRouter.route('/set-disable-until').post(contextMiddleware(false), isUserAuthenticated, UserController.setDisableUntil)\r\n+\r\n+// userRouter.route('/get-loyalty-details').get(contextMiddleware(false), isUserAuthenticated, UserController.getLoyaltyDetails)\r\n+\r\n+// userRouter.route('/remove-profile-image').put(contextMiddleware(false), isUserAuthenticated, UserController.removeProfileImage)\r\n+\r\n+// userRouter.route('/get-withdraw-requests').get(contextMiddleware(false), isUserAuthenticated, UserController.getWithdrawRequests)\r\n+\r\n+// userRouter.route('/remove-favorite').delete(contextMiddleware(true), isUserAuthenticated, CasinoController.removeFavoriteGame)\r\n+\r\n+// userRouter.route('/favorite-games').get(contextMiddleware(false), isUserAuthenticated, CasinoController.getFavoriteGame)\r\n+\r\n+// userRouter.route('/upload-profile-image').put(contextMiddleware(false), upload.single('profileImage'), isUserAuthenticated, UserController.uploadProfileImage)\r\n+\r\n+// userRouter.route('/wallet-amount').get(contextMiddleware(false), isUserAuthenticated, UserController.walletAmount)\r\n+\r\n+// userRouter.route('/upload-huawei-image').post(contextMiddleware(false), upload.single('image'), isUserAuthenticated, UserController.uploadImage)\r\n+\r\n+// userRouter.route('/currency-code').put(contextMiddleware(false), isUserAuthenticated, UserController.updateCurrencyCode)\r\n+\r\n+userRouter.route('/self-exclusion').put(contextMiddleware(true), requestValidationMiddleware(updateSelfExclusionSchema), isUserAuthenticated, UserController.updateSelfExclusion)\r\n+\r\n+// userRouter.route('/ghost-mode').put(contextMiddleware(true), isUserAuthenticated, UserController.updateGhostMode)\r\n+\r\n+// Bonus APIs\r\n+userRouter.route('/user-bonus').get(contextMiddleware(false), isUserAuthenticated, requestValidationMiddleware(getUserBonusSchema), BonusController.getUserBonus)\r\n+userRouter.route('/get-all-bonus').get(requestValidationMiddleware(getAllBonusSchema), isUserAuthenticated, BonusController.getAllBonus)\r\n+\r\n+// userRouter.route('/avail-bonus').post(contextMiddleware(true), requestValidationMiddleware(availBonusSchema), isUserAuthenticated, BonusController.availBonus)\r\n+// userRouter.route('/cancel-bonus').put(contextMiddleware(true), requestValidationMiddleware(cancelBonusSchema), isUserAuthenticated, BonusController.cancelBonus)\r\n+// userRouter.route('/bonus-detail').get(requestValidationMiddleware(getBonusDetailSchema), isUserAuthenticated, BonusController.getBonusDetail)\r\n+\r\n+\r\n+export { userRouter }\r\n"
                },
                {
                    "date": 1754043846473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n const args = { mergeParams: true }\r\n const userRouter = express.Router(args)\r\n \r\n // Public Routes\r\n-userRouter.route('/sign-up').post(geoVpnBlockMiddleware, requestValidationMiddleware(userSignUpSchema), contextMiddleware(true), UserController.userSignUp)\r\n+userRouter.route('/sign-up').post(geoVpnBlockMiddleware, geoBlock(), requestValidationMiddleware(userSignUpSchema), contextMiddleware(true), UserController.userSignUp)\r\n userRouter.route('/login').post(geoVpnBlockMiddleware, requestValidationMiddleware(userLoginSchema), contextMiddleware(false), UserController.userLogin)\r\n \r\n userRouter.route('/verify-email').get(requestValidationMiddleware(verifyEmailSchema), contextMiddleware(true), UserController.verifyEmail)\r\n \r\n"
                },
                {
                    "date": 1754044038044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n const args = { mergeParams: true }\r\n const userRouter = express.Router(args)\r\n \r\n // Public Routes\r\n-userRouter.route('/sign-up').post(geoVpnBlockMiddleware, geoBlock(), requestValidationMiddleware(userSignUpSchema), contextMiddleware(true), UserController.userSignUp)\r\n+userRouter.route('/sign-up').post(geoVpnBlockMiddleware, requestValidationMiddleware(userSignUpSchema), contextMiddleware(true), UserController.userSignUp)\r\n userRouter.route('/login').post(geoVpnBlockMiddleware, requestValidationMiddleware(userLoginSchema), contextMiddleware(false), UserController.userLogin)\r\n \r\n userRouter.route('/verify-email').get(requestValidationMiddleware(verifyEmailSchema), contextMiddleware(true), UserController.verifyEmail)\r\n \r\n"
                },
                {
                    "date": 1754044067885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,10 +32,10 @@\n const args = { mergeParams: true }\r\n const userRouter = express.Router(args)\r\n \r\n // Public Routes\r\n-userRouter.route('/sign-up').post(geoVpnBlockMiddleware, requestValidationMiddleware(userSignUpSchema), contextMiddleware(true), UserController.userSignUp)\r\n-userRouter.route('/login').post(geoVpnBlockMiddleware, requestValidationMiddleware(userLoginSchema), contextMiddleware(false), UserController.userLogin)\r\n+userRouter.route('/sign-up').post(requestValidationMiddleware(userSignUpSchema), contextMiddleware(true), UserController.userSignUp)\r\n+userRouter.route('/login').post(requestValidationMiddleware(userLoginSchema), contextMiddleware(false), UserController.userLogin)\r\n \r\n userRouter.route('/verify-email').get(requestValidationMiddleware(verifyEmailSchema), contextMiddleware(true), UserController.verifyEmail)\r\n \r\n // Referral routes\r\n"
                }
            ],
            "date": 1753424564150,
            "name": "Commit-0",
            "content": "// import multer from 'multer'\nimport express from 'express'\n\nimport BonusController from '@src/rest-resources/controllers/bonus.controller'\nimport UserController from '@src/rest-resources/controllers/user.controller'\n// import { CasinoController } from '@src/rest-resources/controllers/casino.controller'\nimport AffiliateController from '@src/rest-resources/controllers/affiliate.controller'\nimport contextMiddleware from '@src/rest-resources/middlewares/context.middleware'\n// import { validateSignature } from '@src/rest-resources/middlewares/validateSignature'\nimport { getAllBonusSchema } from '@src/json-schemas/user/getAllBonus.schema'\nimport { getOtpSchema } from '@src/json-schemas/user/getOtp.schema'\nimport { getReferredUsersSchema } from '@src/json-schemas/user/getReferredUsers.schema'\nimport { getUserBonusSchema } from '@src/json-schemas/user/getUserBonus.schema'\nimport { getUserDetailsSchema } from '@src/json-schemas/user/getUserDetails.schema'\nimport { getUserTransactionsSchema } from '@src/json-schemas/user/getUserTransactions.schema'\nimport { setDefaultWalletSchema } from '@src/json-schemas/user/setDefaultWallet.schema'\nimport { updateSelfExclusionSchema } from '@src/json-schemas/user/updateSelfExlusion.schema'\nimport { updateUserDetailsSchema } from '@src/json-schemas/user/updateUserDetails.schema'\nimport { userLoginSchema } from '@src/json-schemas/user/userLogin.schema'\nimport { userSignUpSchema } from '@src/json-schemas/user/userSignUp.schema'\nimport { verifyEmailSchema } from '@src/json-schemas/user/verifyEmail.schema'\nimport { verifyForgotPasswordSchema } from '@src/json-schemas/user/verifyForgotPasswordSchema'\nimport { verifyOtpSchema } from '@src/json-schemas/user/verifyOtp.schema'\nimport { getAllWithdrawRequestSchema } from '@src/json-schemas/wallet/getAllWithdrawRequests'\nimport { isUserAuthenticated } from '@src/rest-resources/middlewares/isUserAuthenticated'\nimport { geoBlock } from '@src/rest-resources/middlewares/location.middleware'\nimport { uploadSingle } from '@src/rest-resources/middlewares/multer.middleware'\nimport requestValidationMiddleware from '@src/rest-resources/middlewares/requestValidation.middleware'\nconst geoVpnBlockMiddleware = require('../../middlewares/geoVpnBlock.middleware');\n\n// const upload = multer()\nconst args = { mergeParams: true }\nconst userRouter = express.Router(args)\n\n// Public Routes\nuserRouter.route('/sign-up').post(geoVpnBlockMiddleware, geoBlock(), requestValidationMiddleware(userSignUpSchema), contextMiddleware(true), UserController.userSignUp)\nuserRouter.route('/login').post(geoVpnBlockMiddleware, requestValidationMiddleware(userLoginSchema), contextMiddleware(false), UserController.userLogin)\n\nuserRouter.route('/verify-email').get(requestValidationMiddleware(verifyEmailSchema), contextMiddleware(true), UserController.verifyEmail)\n\n// Referral routes\nuserRouter.route('/referred-users').get(contextMiddleware(false), isUserAuthenticated, requestValidationMiddleware(getReferredUsersSchema), AffiliateController.getReferredUsers)\n\n// tg-casino routes\nuserRouter.route('/transactions').get(contextMiddleware(false), isUserAuthenticated, requestValidationMiddleware(getUserTransactionsSchema), UserController.getUserTransactions)\nuserRouter.route('/set-default').post(contextMiddleware(true), requestValidationMiddleware(setDefaultWalletSchema), isUserAuthenticated, UserController.setDefaultWallet)\nuserRouter.route('/').get(requestValidationMiddleware(getUserDetailsSchema), isUserAuthenticated, UserController.getUserDetails)\n\nuserRouter.route('/logout').post(contextMiddleware(false), isUserAuthenticated, UserController.userLogout)\nuserRouter.route('/update-user').put(contextMiddleware(true), uploadSingle('profileImage'), requestValidationMiddleware(updateUserDetailsSchema), isUserAuthenticated, UserController.updateUserDetails)\nuserRouter.route('/withdraw-request')\n  // .post(contextMiddleware(true), requestValidationMiddleware(createWithdrawRequestSchema), isUserAuthenticated, UserController.createWithdrawRequest)\n  .get(contextMiddleware(false), requestValidationMiddleware(getAllWithdrawRequestSchema), isUserAuthenticated, UserController.getWithdrawRequests)\n\nuserRouter.route('/get-otp').get(contextMiddleware(false), requestValidationMiddleware(getOtpSchema), isUserAuthenticated, UserController.getOtp)\nuserRouter.route('/verify-otp').put(contextMiddleware(true), requestValidationMiddleware(verifyOtpSchema), isUserAuthenticated, UserController.verifyOtp)\n\n\n// Veriff kyc verification\nuserRouter.route('/init-veriff-kyc').get(contextMiddleware(true), isUserAuthenticated, requestValidationMiddleware({}), UserController.createVeriffSession)\nuserRouter.route('/veriff-callback').post(contextMiddleware(true), requestValidationMiddleware({}), UserController.veriffCallback)\n\n\n// userRouter.route('/upate-user').post(contextMiddleware(false), isUserAuthenticated, UserController.userSignUp)\nuserRouter.route('/verify-forget-password').post(contextMiddleware(true), requestValidationMiddleware(verifyForgotPasswordSchema), UserController.verifyForgetPassword)\n\nuserRouter.route('/change-password').put(contextMiddleware(true), isUserAuthenticated, UserController.changePassword)\n\nuserRouter.route('/forget-password').post(contextMiddleware(true), UserController.forgetPassword)\n\n// userRouter.route('/get-current-winners').get(contextMiddleware(false), UserController.getCurrentWinners)\n\n// userRouter.route('/refresh-email-token').post(contextMiddleware(true), UserController.refreshEmailToken)\n\n// userRouter.route('/check-unique-constraints').get(contextMiddleware(false), UserController.checkEmailUsername)\n\n// Microservice Routes\n\n// userRouter.route('/cancel-free-spins').post(contextMiddleware(false), validateSignature, UserController.cancelFreespins)\n\n// Private Routes\n\n// userRouter.route('/set-loss-limit').post(contextMiddleware(false), isUserAuthenticated, UserController.setLossLimit)\n\n// userRouter.route('/get-limit-table').get(contextMiddleware(false), isUserAuthenticated, UserController.getLimitTable)\n\n// userRouter.route('/set-daily-limit').post(contextMiddleware(false), isUserAuthenticated, UserController.setDailyLimit)\n\n// userRouter.route('/set-session-time').post(contextMiddleware(false), isUserAuthenticated, UserController.setTimeLimit)\n\n// userRouter.route('/set-deposit-limit').post(contextMiddleware(false), isUserAuthenticated, UserController.setDepositLimit)\n\n// userRouter.route('/set-disable-until').post(contextMiddleware(false), isUserAuthenticated, UserController.setDisableUntil)\n\n// userRouter.route('/get-loyalty-details').get(contextMiddleware(false), isUserAuthenticated, UserController.getLoyaltyDetails)\n\n// userRouter.route('/remove-profile-image').put(contextMiddleware(false), isUserAuthenticated, UserController.removeProfileImage)\n\n// userRouter.route('/get-withdraw-requests').get(contextMiddleware(false), isUserAuthenticated, UserController.getWithdrawRequests)\n\n// userRouter.route('/remove-favorite').delete(contextMiddleware(true), isUserAuthenticated, CasinoController.removeFavoriteGame)\n\n// userRouter.route('/favorite-games').get(contextMiddleware(false), isUserAuthenticated, CasinoController.getFavoriteGame)\n\n// userRouter.route('/upload-profile-image').put(contextMiddleware(false), upload.single('profileImage'), isUserAuthenticated, UserController.uploadProfileImage)\n\n// userRouter.route('/wallet-amount').get(contextMiddleware(false), isUserAuthenticated, UserController.walletAmount)\n\n// userRouter.route('/upload-huawei-image').post(contextMiddleware(false), upload.single('image'), isUserAuthenticated, UserController.uploadImage)\n\n// userRouter.route('/currency-code').put(contextMiddleware(false), isUserAuthenticated, UserController.updateCurrencyCode)\n\nuserRouter.route('/self-exclusion').put(contextMiddleware(true), requestValidationMiddleware(updateSelfExclusionSchema), isUserAuthenticated, UserController.updateSelfExclusion)\n\n// userRouter.route('/ghost-mode').put(contextMiddleware(true), isUserAuthenticated, UserController.updateGhostMode)\n\n// Bonus APIs\nuserRouter.route('/user-bonus').get(contextMiddleware(false), isUserAuthenticated, requestValidationMiddleware(getUserBonusSchema), BonusController.getUserBonus)\nuserRouter.route('/get-all-bonus').get(requestValidationMiddleware(getAllBonusSchema), isUserAuthenticated, BonusController.getAllBonus)\n\n// userRouter.route('/avail-bonus').post(contextMiddleware(true), requestValidationMiddleware(availBonusSchema), isUserAuthenticated, BonusController.availBonus)\n// userRouter.route('/cancel-bonus').put(contextMiddleware(true), requestValidationMiddleware(cancelBonusSchema), isUserAuthenticated, BonusController.cancelBonus)\n// userRouter.route('/bonus-detail').get(requestValidationMiddleware(getBonusDetailSchema), isUserAuthenticated, BonusController.getBonusDetail)\n\n\nexport { userRouter }\n"
        }
    ]
}