{
    "sourceFile": "backend/src/db/models/users.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1753423477214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754045506657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,131 +1,121 @@\n-'use strict'\n-\n-module.exports = function (sequelize, DataTypes) {\n-  const User = sequelize.define('User', {\n-    userId: {\n-      autoIncrement: true,\n-      type: DataTypes.INTEGER,\n-      allowNull: false,\n-      primaryKey: true\n-    },\n-    username: {\n-      type: DataTypes.STRING,\n-      allowNull: true\n-    },\n-    firstName: {\n-      type: DataTypes.STRING,\n-      allowNull: true\n-    },\n-    lastName: {\n-      type: DataTypes.STRING,\n-      allowNull: true\n-    },\n-    email: {\n-      type: DataTypes.STRING,\n-      allowNull: true\n-    },\n-    isEmailVerified: {\n-      type: DataTypes.BOOLEAN,\n-      defaultValue: false\n-    },\n-    password: {\n-      type: DataTypes.STRING,\n-      allowNull: false\n-    },\n-    locale: {\n-      type: DataTypes.STRING,\n-      allowNull: true,\n-      defaultValue: 'EN',\n-    },\n-    phone: {\n-      type: DataTypes.STRING,\n-      allowNull: true\n-    },\n-    dateOfBirth: {\n-      type: DataTypes.DATE,\n-      allowNull: true\n-    },\n-    isActive: {\n-      type: DataTypes.BOOLEAN,\n-      defaultValue: true\n-    },\n-    stateCode: {\n-      type: DataTypes.STRING,\n-      allowNull: true\n-    },\n-    googleId: {\n-      type: DataTypes.STRING,\n-      allowNull: true\n-    },\n-    facebookId: {\n-      type: DataTypes.STRING,\n-      allowNull: true\n-    },\n-    signInType: {\n-      type: DataTypes.STRING,\n-      allowNull: true\n-    },\n-    lastLoginDate: {\n-      type: DataTypes.DATE,\n-      allowNull: true\n-    },\n-    phoneCode: {\n-      type: DataTypes.STRING,\n-      allowNull: true\n-    },\n-    city: {\n-      type: DataTypes.STRING,\n-      allowNull: true\n-    },\n-    profileImage: {\n-      type: DataTypes.STRING,\n-      allowNull: true\n-    },\n-    veriffStatus: {\n-      type: DataTypes.STRING,\n-      allowNull: true\n-    },\n-    isInternalUser: {\n-      type: DataTypes.BOOLEAN,\n-      defaultValue: false\n-    },\n-    refParentId: {\n-      type: DataTypes.INTEGER,\n-      allowNull: true\n-    },\n-    other: {\n-      type: DataTypes.JSONB,\n-      allowNull: true\n-    }\n-  }, {\n-    sequelize,\n-    tableName: 'users',\n-    schema: 'public',\n-    timestamps: true,\n-    underscored: true,\n-    paranoid: false\n-  })\n-\n-  User.associate = function (model) {\n-    User.hasMany(model.Wallet, { as: 'userWallet', foreignKey: 'userId', onDelete: 'cascade' })\n-    User.hasMany(model.CasinoFavoriteGame, { foreignKey: 'userId', onDelete: 'cascade' })\n-    User.hasMany(model.CasinoTransaction, { as: 'casinoTransactions', foreignKey: 'userId', onDelete: 'cascade' })\n-    User.hasMany(model.UserAffiliations, { foreignKey: 'affiliateUserId' });\n-    User.hasOne(model.UserAffiliations, { foreignKey: 'referredUserId' });\n-    User.belongsTo(model.User, { foreignKey: 'refParentId', as: 'referrer' })\n-    User.hasMany(User, { foreignKey: 'refParentId', as: 'referredUsers' });\n-    User.hasOne(model.UserDetails, { foreignKey: 'userId', as: 'userDetails', constraints: false, onDelete: 'cascade' })\n-    User.hasMany(model.UserBonus, { foreignKey: 'userId', as: 'bonus', constraints: false, onDelete: 'cascade' })\n-    User.hasMany(model.WithdrawalRequest, { foreignKey: 'userId' })\n-    User.hasMany(model.BonusClaim, { foreignKey: 'userId', as: 'bonusClaims', onDelete: 'cascade' });\n-    User.hasOne(model.Limit, { foreignKey: 'userId', as: 'userLimits', constraints: false, onDelete: 'cascade' })\n-    User.hasMany(model.UserTierProgress, { foreignKey: 'userId', as: 'userTierProgresses' })\n-    User.hasMany(model.PostalCode, { foreignKey: 'userId', as: 'postalCodes', onDelete: 'cascade' })\n-    User.belongsTo(model.State, { foreignKey: 'stateCode' })\n-    User.hasMany(model.PaymentDetail, { foreignKey: 'userId', as: 'paymentDetails', onDelete: 'CASCADE' })\n-    User.hasMany(model.ApprovelyPaymentOrder, { foreignKey: 'userId', as: 'approvelyOrders', onDelete: 'CASCADE' })\n-\n-  }\n-\n-  return User\n+'use strict'\r\n+\r\n+module.exports = function (sequelize, DataTypes) {\r\n+  const User = sequelize.define('User', {\r\n+    userId: {\r\n+      autoIncrement: true,\r\n+      type: DataTypes.INTEGER,\r\n+      allowNull: false,\r\n+      primaryKey: true\r\n+    },\r\n+    username: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true\r\n+    },\r\n+    firstName: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true\r\n+    },\r\n+    lastName: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true\r\n+    },\r\n+    email: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true\r\n+    },\r\n+    isEmailVerified: {\r\n+      type: DataTypes.BOOLEAN,\r\n+      defaultValue: false\r\n+    },\r\n+    password: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: false\r\n+    },\r\n+    locale: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true,\r\n+      defaultValue: 'EN',\r\n+    },\r\n+    phone: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true\r\n+    },\r\n+    dateOfBirth: {\r\n+      type: DataTypes.DATE,\r\n+      allowNull: true\r\n+    },\r\n+    isActive: {\r\n+      type: DataTypes.BOOLEAN,\r\n+      defaultValue: true\r\n+    },\r\n+    stateCode: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true\r\n+    },\r\n+\r\n+\r\n+    lastLoginDate: {\r\n+      type: DataTypes.DATE,\r\n+      allowNull: true\r\n+    },\r\n+    phoneCode: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true\r\n+    },\r\n+    city: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true\r\n+    },\r\n+    profileImage: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true\r\n+    },\r\n+    veriffStatus: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true\r\n+    },\r\n+    isInternalUser: {\r\n+      type: DataTypes.BOOLEAN,\r\n+      defaultValue: false\r\n+    },\r\n+    refParentId: {\r\n+      type: DataTypes.INTEGER,\r\n+      allowNull: true\r\n+    },\r\n+    other: {\r\n+      type: DataTypes.JSONB,\r\n+      allowNull: true\r\n+    }\r\n+  }, {\r\n+    sequelize,\r\n+    tableName: 'users',\r\n+    schema: 'public',\r\n+    timestamps: true,\r\n+    underscored: true,\r\n+    paranoid: false\r\n+  })\r\n+\r\n+  User.associate = function (model) {\r\n+    User.hasMany(model.Wallet, { as: 'userWallet', foreignKey: 'userId', onDelete: 'cascade' })\r\n+    User.hasMany(model.CasinoFavoriteGame, { foreignKey: 'userId', onDelete: 'cascade' })\r\n+    User.hasMany(model.CasinoTransaction, { as: 'casinoTransactions', foreignKey: 'userId', onDelete: 'cascade' })\r\n+    User.hasMany(model.UserAffiliations, { foreignKey: 'affiliateUserId' });\r\n+    User.hasOne(model.UserAffiliations, { foreignKey: 'referredUserId' });\r\n+    User.belongsTo(model.User, { foreignKey: 'refParentId', as: 'referrer' })\r\n+    User.hasMany(User, { foreignKey: 'refParentId', as: 'referredUsers' });\r\n+    User.hasOne(model.UserDetails, { foreignKey: 'userId', as: 'userDetails', constraints: false, onDelete: 'cascade' })\r\n+    User.hasMany(model.UserBonus, { foreignKey: 'userId', as: 'bonus', constraints: false, onDelete: 'cascade' })\r\n+    User.hasMany(model.WithdrawalRequest, { foreignKey: 'userId' })\r\n+    User.hasMany(model.BonusClaim, { foreignKey: 'userId', as: 'bonusClaims', onDelete: 'cascade' });\r\n+    User.hasOne(model.Limit, { foreignKey: 'userId', as: 'userLimits', constraints: false, onDelete: 'cascade' })\r\n+    User.hasMany(model.UserTierProgress, { foreignKey: 'userId', as: 'userTierProgresses' })\r\n+    User.hasMany(model.PostalCode, { foreignKey: 'userId', as: 'postalCodes', onDelete: 'cascade' })\r\n+    User.belongsTo(model.State, { foreignKey: 'stateCode' })\r\n+    User.hasMany(model.PaymentDetail, { foreignKey: 'userId', as: 'paymentDetails', onDelete: 'CASCADE' })\r\n+    User.hasMany(model.ApprovelyPaymentOrder, { foreignKey: 'userId', as: 'approvelyOrders', onDelete: 'CASCADE' })\r\n+\r\n+  }\r\n+\r\n+  return User\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1754046264441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+'use strict'\r\n+\r\n+module.exports = function (sequelize, DataTypes) {\r\n+  const User = sequelize.define('User', {\r\n+    userId: {\r\n+      autoIncrement: true,\r\n+      type: DataTypes.INTEGER,\r\n+      allowNull: false,\r\n+      primaryKey: true\r\n+    },\r\n+    username: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true\r\n+    },\r\n+    firstName: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true\r\n+    },\r\n+    lastName: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true\r\n+    },\r\n+    email: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true\r\n+    },\r\n+    isEmailVerified: {\r\n+      type: DataTypes.BOOLEAN,\r\n+      defaultValue: false\r\n+    },\r\n+    password: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: false\r\n+    },\r\n+    locale: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true,\r\n+      defaultValue: 'EN',\r\n+    },\r\n+    phone: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true\r\n+    },\r\n+    dateOfBirth: {\r\n+      type: DataTypes.DATE,\r\n+      allowNull: true\r\n+    },\r\n+    isActive: {\r\n+      type: DataTypes.BOOLEAN,\r\n+      defaultValue: true\r\n+    },\r\n+    stateCode: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true\r\n+    },\r\n+    googleId: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true\r\n+    },\r\n+    facebookId: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true\r\n+    },\r\n+    signInType: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true\r\n+    },\r\n+    lastLoginDate: {\r\n+      type: DataTypes.DATE,\r\n+      allowNull: true\r\n+    },\r\n+    phoneCode: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true\r\n+    },\r\n+    city: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true\r\n+    },\r\n+    profileImage: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true\r\n+    },\r\n+    veriffStatus: {\r\n+      type: DataTypes.STRING,\r\n+      allowNull: true\r\n+    },\r\n+    isInternalUser: {\r\n+      type: DataTypes.BOOLEAN,\r\n+      defaultValue: false\r\n+    },\r\n+    refParentId: {\r\n+      type: DataTypes.INTEGER,\r\n+      allowNull: true\r\n+    },\r\n+    other: {\r\n+      type: DataTypes.JSONB,\r\n+      allowNull: true\r\n+    }\r\n+  }, {\r\n+    sequelize,\r\n+    tableName: 'users',\r\n+    schema: 'public',\r\n+    timestamps: true,\r\n+    underscored: true,\r\n+    paranoid: false\r\n+  })\r\n+\r\n+  User.associate = function (model) {\r\n+    User.hasMany(model.Wallet, { as: 'userWallet', foreignKey: 'userId', onDelete: 'cascade' })\r\n+    User.hasMany(model.CasinoFavoriteGame, { foreignKey: 'userId', onDelete: 'cascade' })\r\n+    User.hasMany(model.CasinoTransaction, { as: 'casinoTransactions', foreignKey: 'userId', onDelete: 'cascade' })\r\n+    User.hasMany(model.UserAffiliations, { foreignKey: 'affiliateUserId' });\r\n+    User.hasOne(model.UserAffiliations, { foreignKey: 'referredUserId' });\r\n+    User.belongsTo(model.User, { foreignKey: 'refParentId', as: 'referrer' })\r\n+    User.hasMany(User, { foreignKey: 'refParentId', as: 'referredUsers' });\r\n+    User.hasOne(model.UserDetails, { foreignKey: 'userId', as: 'userDetails', constraints: false, onDelete: 'cascade' })\r\n+    User.hasMany(model.UserBonus, { foreignKey: 'userId', as: 'bonus', constraints: false, onDelete: 'cascade' })\r\n+    User.hasMany(model.WithdrawalRequest, { foreignKey: 'userId' })\r\n+    User.hasMany(model.BonusClaim, { foreignKey: 'userId', as: 'bonusClaims', onDelete: 'cascade' });\r\n+    User.hasOne(model.Limit, { foreignKey: 'userId', as: 'userLimits', constraints: false, onDelete: 'cascade' })\r\n+    User.hasMany(model.UserTierProgress, { foreignKey: 'userId', as: 'userTierProgresses' })\r\n+    User.hasMany(model.PostalCode, { foreignKey: 'userId', as: 'postalCodes', onDelete: 'cascade' })\r\n+    User.belongsTo(model.State, { foreignKey: 'stateCode' })\r\n+    User.hasMany(model.PaymentDetail, { foreignKey: 'userId', as: 'paymentDetails', onDelete: 'CASCADE' })\r\n+    User.hasMany(model.ApprovelyPaymentOrder, { foreignKey: 'userId', as: 'approvelyOrders', onDelete: 'CASCADE' })\r\n+\r\n+  }\r\n+\r\n+  return User\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1753423477214,
            "name": "Commit-0",
            "content": "'use strict'\n\nmodule.exports = function (sequelize, DataTypes) {\n  const User = sequelize.define('User', {\n    userId: {\n      autoIncrement: true,\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      primaryKey: true\n    },\n    username: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n    firstName: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n    lastName: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n    email: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n    isEmailVerified: {\n      type: DataTypes.BOOLEAN,\n      defaultValue: false\n    },\n    password: {\n      type: DataTypes.STRING,\n      allowNull: false\n    },\n    locale: {\n      type: DataTypes.STRING,\n      allowNull: true,\n      defaultValue: 'EN',\n    },\n    phone: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n    dateOfBirth: {\n      type: DataTypes.DATE,\n      allowNull: true\n    },\n    isActive: {\n      type: DataTypes.BOOLEAN,\n      defaultValue: true\n    },\n    stateCode: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n    googleId: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n    facebookId: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n    signInType: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n    lastLoginDate: {\n      type: DataTypes.DATE,\n      allowNull: true\n    },\n    phoneCode: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n    city: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n    profileImage: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n    veriffStatus: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n    isInternalUser: {\n      type: DataTypes.BOOLEAN,\n      defaultValue: false\n    },\n    refParentId: {\n      type: DataTypes.INTEGER,\n      allowNull: true\n    },\n    other: {\n      type: DataTypes.JSONB,\n      allowNull: true\n    }\n  }, {\n    sequelize,\n    tableName: 'users',\n    schema: 'public',\n    timestamps: true,\n    underscored: true,\n    paranoid: false\n  })\n\n  User.associate = function (model) {\n    User.hasMany(model.Wallet, { as: 'userWallet', foreignKey: 'userId', onDelete: 'cascade' })\n    User.hasMany(model.CasinoFavoriteGame, { foreignKey: 'userId', onDelete: 'cascade' })\n    User.hasMany(model.CasinoTransaction, { as: 'casinoTransactions', foreignKey: 'userId', onDelete: 'cascade' })\n    User.hasMany(model.UserAffiliations, { foreignKey: 'affiliateUserId' });\n    User.hasOne(model.UserAffiliations, { foreignKey: 'referredUserId' });\n    User.belongsTo(model.User, { foreignKey: 'refParentId', as: 'referrer' })\n    User.hasMany(User, { foreignKey: 'refParentId', as: 'referredUsers' });\n    User.hasOne(model.UserDetails, { foreignKey: 'userId', as: 'userDetails', constraints: false, onDelete: 'cascade' })\n    User.hasMany(model.UserBonus, { foreignKey: 'userId', as: 'bonus', constraints: false, onDelete: 'cascade' })\n    User.hasMany(model.WithdrawalRequest, { foreignKey: 'userId' })\n    User.hasMany(model.BonusClaim, { foreignKey: 'userId', as: 'bonusClaims', onDelete: 'cascade' });\n    User.hasOne(model.Limit, { foreignKey: 'userId', as: 'userLimits', constraints: false, onDelete: 'cascade' })\n    User.hasMany(model.UserTierProgress, { foreignKey: 'userId', as: 'userTierProgresses' })\n    User.hasMany(model.PostalCode, { foreignKey: 'userId', as: 'postalCodes', onDelete: 'cascade' })\n    User.belongsTo(model.State, { foreignKey: 'stateCode' })\n    User.hasMany(model.PaymentDetail, { foreignKey: 'userId', as: 'paymentDetails', onDelete: 'CASCADE' })\n    User.hasMany(model.ApprovelyPaymentOrder, { foreignKey: 'userId', as: 'approvelyOrders', onDelete: 'CASCADE' })\n\n  }\n\n  return User\n}"
        }
    ]
}