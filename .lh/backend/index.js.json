{
    "sourceFile": "backend/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1753423521790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753935389359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,13 +3,13 @@\n import app from '@src/rest-resources'\n import socketServer from '@src/socket-resources'\n import gracefulShutDown from '@src/libs/gracefulShutDown'\n import { Logger } from '@src/libs/logger'\n-const passport = require('passport');\n-const GoogleStrategy = require('passport-google-oauth20').Strategy;\n-const FacebookStrategy = require('passport-facebook').Strategy;\n-const db = require('./src/db/models');\n-const jwt = require('jsonwebtoken');\n+import passport from 'passport'\n+import GoogleStrategy from 'passport-google-oauth20'\n+import FacebookStrategy from 'passport-facebook'\n+import db from '@src/db/models'\n+import jwt from 'jsonwebtoken'\n \n passport.use(new GoogleStrategy({\n   clientID: process.env.GOOGLE_CLIENT_ID,\n   clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n"
                },
                {
                    "date": 1753935491648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,11 +66,48 @@\n const httpServer = createServer(app)\n \n socketServer.attach(httpServer)\n \n-httpServer.listen({ port: config.get('port') }, () => {\n-  Logger.info('Server Started', { message: `Listening On ${config.get('port')}` })\n-})\n+// Test database connection before starting server\n+const testDatabaseConnection = async () => {\n+  try {\n+    await db.sequelize.authenticate()\n+    Logger.info('Database Connected', { \n+      message: `Successfully connected to database: ${db.sequelize.config.database}`,\n+      host: db.sequelize.config.host,\n+      port: db.sequelize.config.port\n+    })\n+    return true\n+  } catch (error) {\n+    Logger.error('Database Connection Failed', { \n+      message: 'Unable to connect to the database',\n+      error: error.message \n+    })\n+    return false\n+  }\n+}\n \n+// Start server only after database connection is established\n+const startServer = async () => {\n+  const dbConnected = await testDatabaseConnection()\n+  \n+  if (!dbConnected) {\n+    Logger.error('Server Startup Failed', { \n+      message: 'Cannot start server without database connection' \n+    })\n+    process.exit(1)\n+  }\n+\n+  httpServer.listen({ port: config.get('port') }, () => {\n+    Logger.info('Server Started Successfully', { \n+      message: `HTTP Server listening on port ${config.get('port')}`,\n+      environment: config.get('env'),\n+      timestamp: new Date().toISOString()\n+    })\n+  })\n+}\n+\n+startServer()\n+\n process.on('SIGTERM', gracefulShutDown)\n process.on('SIGINT', gracefulShutDown)\n process.on('SIGUSR2', gracefulShutDown)\n"
                },
                {
                    "date": 1753935553377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,19 +70,12 @@\n // Test database connection before starting server\n const testDatabaseConnection = async () => {\n   try {\n     await db.sequelize.authenticate()\n-    Logger.info('Database Connected', { \n-      message: `Successfully connected to database: ${db.sequelize.config.database}`,\n-      host: db.sequelize.config.host,\n-      port: db.sequelize.config.port\n-    })\n+    Logger.info('Database Connected')\n     return true\n   } catch (error) {\n-    Logger.error('Database Connection Failed', { \n-      message: 'Unable to connect to the database',\n-      error: error.message \n-    })\n+    Logger.error('Database Connection Failed', { error: error.message })\n     return false\n   }\n }\n \n@@ -90,20 +83,13 @@\n const startServer = async () => {\n   const dbConnected = await testDatabaseConnection()\n   \n   if (!dbConnected) {\n-    Logger.error('Server Startup Failed', { \n-      message: 'Cannot start server without database connection' \n-    })\n     process.exit(1)\n   }\n \n   httpServer.listen({ port: config.get('port') }, () => {\n-    Logger.info('Server Started Successfully', { \n-      message: `HTTP Server listening on port ${config.get('port')}`,\n-      environment: config.get('env'),\n-      timestamp: new Date().toISOString()\n-    })\n+    Logger.info('Server Connected')\n   })\n }\n \n startServer()\n"
                },
                {
                    "date": 1753947701096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,27 +69,55 @@\n \n // Test database connection before starting server\n const testDatabaseConnection = async () => {\n   try {\n+    // Log database configuration\n+    Logger.info('Database Configuration:', {\n+      database: config.get('sequelize.name'),\n+      user: config.get('sequelize.user'),\n+      readHost: config.get('sequelize.readHost'),\n+      writeHost: config.get('sequelize.writeHost'),\n+      port: config.get('sequelize.port'),\n+      env: config.get('env')\n+    })\n+\n+    // Log environment variables\n+    Logger.info('Environment Variables:', {\n+      DB_NAME: process.env.DB_NAME,\n+      DB_USER: process.env.DB_USER,\n+      DB_READ_HOST: process.env.DB_READ_HOST,\n+      DB_WRITE_HOST: process.env.DB_WRITE_HOST,\n+      DB_PORT: process.env.DB_PORT,\n+      NODE_ENV: process.env.NODE_ENV\n+    })\n+\n+    Logger.info('Attempting database connection...')\n     await db.sequelize.authenticate()\n-    Logger.info('Database Connected')\n+    Logger.info('Database Connected Successfully')\n     return true\n   } catch (error) {\n-    Logger.error('Database Connection Failed', { error: error.message })\n+    Logger.error('Database Connection Failed', { \n+      error: error.message,\n+      stack: error.stack,\n+      code: error.code,\n+      errno: error.errno\n+    })\n     return false\n   }\n }\n \n // Start server only after database connection is established\n const startServer = async () => {\n+  Logger.info('Starting server initialization...')\n   const dbConnected = await testDatabaseConnection()\n   \n   if (!dbConnected) {\n+    Logger.error('Server startup failed due to database connection error')\n     process.exit(1)\n   }\n \n   httpServer.listen({ port: config.get('port') }, () => {\n-    Logger.info('Server Connected')\n+    Logger.info('Server Connected on port:', config.get('port'))\n   })\n }\n \n startServer()\n"
                },
                {
                    "date": 1753947845821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,10 +98,19 @@\n     Logger.error('Database Connection Failed', { \n       error: error.message,\n       stack: error.stack,\n       code: error.code,\n-      errno: error.errno\n+      errno: error.errno,\n+      sqlState: error.sqlState,\n+      sqlMessage: error.sqlMessage\n     })\n+    \n+    // Log additional error details\n+    console.error('Full Database Error:', error)\n+    console.error('Error Code:', error.code)\n+    console.error('Error Message:', error.message)\n+    console.error('Error Stack:', error.stack)\n+    \n     return false\n   }\n }\n \n"
                },
                {
                    "date": 1754045506618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,136 +1,79 @@\n-import { createServer } from 'http'\n-import config from '@src/configs/app.config'\n-import app from '@src/rest-resources'\n-import socketServer from '@src/socket-resources'\n-import gracefulShutDown from '@src/libs/gracefulShutDown'\n-import { Logger } from '@src/libs/logger'\n-import passport from 'passport'\n-import GoogleStrategy from 'passport-google-oauth20'\n-import FacebookStrategy from 'passport-facebook'\n-import db from '@src/db/models'\n-import jwt from 'jsonwebtoken'\n-\n-passport.use(new GoogleStrategy({\n-  clientID: process.env.GOOGLE_CLIENT_ID,\n-  clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n-  callbackURL: process.env.GOOGLE_CALLBACK_URL,\n-}, async (accessToken, refreshToken, profile, done) => {\n-  try {\n-    let user = await db.User.findOne({ where: { googleId: profile.id } });\n-    if (!user) {\n-      user = await db.User.create({\n-        googleId: profile.id,\n-        email: profile.emails[0].value,\n-        firstName: profile.name.givenName,\n-        lastName: profile.name.familyName,\n-        signInType: 'google',\n-        isEmailVerified: true\n-      });\n-    }\n-    const token = jwt.sign({ userId: user.userId }, process.env.JWT_LOGIN_SECRET, { expiresIn: '1d' });\n-    user.token = token;\n-    return done(null, user);\n-  } catch (err) {\n-    return done(err, null);\n-  }\n-}));\n-\n-passport.use(new FacebookStrategy({\n-  clientID: process.env.FACEBOOK_APP_ID,\n-  clientSecret: process.env.FACEBOOK_APP_SECRET,\n-  callbackURL: process.env.FACEBOOK_CALLBACK_URL,\n-  profileFields: ['id', 'emails', 'name']\n-}, async (accessToken, refreshToken, profile, done) => {\n-  try {\n-    let user = await db.User.findOne({ where: { facebookId: profile.id } });\n-    if (!user) {\n-      user = await db.User.create({\n-        facebookId: profile.id,\n-        email: profile.emails ? profile.emails[0].value : null,\n-        firstName: profile.name.givenName,\n-        lastName: profile.name.familyName,\n-        signInType: 'facebook',\n-        isEmailVerified: true\n-      });\n-    }\n-    const token = jwt.sign({ userId: user.userId }, process.env.JWT_LOGIN_SECRET, { expiresIn: '1d' });\n-    user.token = token;\n-    return done(null, user);\n-  } catch (err) {\n-    return done(err, null);\n-  }\n-}));\n-\n-app.use(passport.initialize());\n-\n-const httpServer = createServer(app)\n-\n-socketServer.attach(httpServer)\n-\n-// Test database connection before starting server\n-const testDatabaseConnection = async () => {\n-  try {\n-    // Log database configuration\n-    Logger.info('Database Configuration:', {\n-      database: config.get('sequelize.name'),\n-      user: config.get('sequelize.user'),\n-      readHost: config.get('sequelize.readHost'),\n-      writeHost: config.get('sequelize.writeHost'),\n-      port: config.get('sequelize.port'),\n-      env: config.get('env')\n-    })\n-\n-    // Log environment variables\n-    Logger.info('Environment Variables:', {\n-      DB_NAME: process.env.DB_NAME,\n-      DB_USER: process.env.DB_USER,\n-      DB_READ_HOST: process.env.DB_READ_HOST,\n-      DB_WRITE_HOST: process.env.DB_WRITE_HOST,\n-      DB_PORT: process.env.DB_PORT,\n-      NODE_ENV: process.env.NODE_ENV\n-    })\n-\n-    Logger.info('Attempting database connection...')\n-    await db.sequelize.authenticate()\n-    Logger.info('Database Connected Successfully')\n-    return true\n-  } catch (error) {\n-    Logger.error('Database Connection Failed', { \n-      error: error.message,\n-      stack: error.stack,\n-      code: error.code,\n-      errno: error.errno,\n-      sqlState: error.sqlState,\n-      sqlMessage: error.sqlMessage\n-    })\n-    \n-    // Log additional error details\n-    console.error('Full Database Error:', error)\n-    console.error('Error Code:', error.code)\n-    console.error('Error Message:', error.message)\n-    console.error('Error Stack:', error.stack)\n-    \n-    return false\n-  }\n-}\n-\n-// Start server only after database connection is established\n-const startServer = async () => {\n-  Logger.info('Starting server initialization...')\n-  const dbConnected = await testDatabaseConnection()\n-  \n-  if (!dbConnected) {\n-    Logger.error('Server startup failed due to database connection error')\n-    process.exit(1)\n-  }\n-\n-  httpServer.listen({ port: config.get('port') }, () => {\n-    Logger.info('Server Connected on port:', config.get('port'))\n-  })\n-}\n-\n-startServer()\n-\n-process.on('SIGTERM', gracefulShutDown)\n-process.on('SIGINT', gracefulShutDown)\n-process.on('SIGUSR2', gracefulShutDown)\n+import { createServer } from 'http'\r\n+import config from '@src/configs/app.config'\r\n+import app from '@src/rest-resources'\r\n+import socketServer from '@src/socket-resources'\r\n+import gracefulShutDown from '@src/libs/gracefulShutDown'\r\n+import { Logger } from '@src/libs/logger'\r\n+import db from '@src/db/models'\r\n+\r\n+const httpServer = createServer(app)\r\n+\r\n+socketServer.attach(httpServer)\r\n+\r\n+// Test database connection before starting server\r\n+const testDatabaseConnection = async () => {\r\n+  try {\r\n+    // Log database configuration\r\n+    Logger.info('Database Configuration:', {\r\n+      database: config.get('sequelize.name'),\r\n+      user: config.get('sequelize.user'),\r\n+      readHost: config.get('sequelize.readHost'),\r\n+      writeHost: config.get('sequelize.writeHost'),\r\n+      port: config.get('sequelize.port'),\r\n+      env: config.get('env')\r\n+    })\r\n+\r\n+    // Log environment variables\r\n+    Logger.info('Environment Variables:', {\r\n+      DB_NAME: process.env.DB_NAME,\r\n+      DB_USER: process.env.DB_USER,\r\n+      DB_READ_HOST: process.env.DB_READ_HOST,\r\n+      DB_WRITE_HOST: process.env.DB_WRITE_HOST,\r\n+      DB_PORT: process.env.DB_PORT,\r\n+      NODE_ENV: process.env.NODE_ENV\r\n+    })\r\n+\r\n+    Logger.info('Attempting database connection...')\r\n+    await db.sequelize.authenticate()\r\n+    Logger.info('Database Connected Successfully')\r\n+    return true\r\n+  } catch (error) {\r\n+    Logger.error('Database Connection Failed', { \r\n+      error: error.message,\r\n+      stack: error.stack,\r\n+      code: error.code,\r\n+      errno: error.errno,\r\n+      sqlState: error.sqlState,\r\n+      sqlMessage: error.sqlMessage\r\n+    })\r\n+    \r\n+    // Log additional error details\r\n+    console.error('Full Database Error:', error)\r\n+    console.error('Error Code:', error.code)\r\n+    console.error('Error Message:', error.message)\r\n+    console.error('Error Stack:', error.stack)\r\n+    \r\n+    return false\r\n+  }\r\n+}\r\n+\r\n+// Start server only after database connection is established\r\n+const startServer = async () => {\r\n+  Logger.info('Starting server initialization...')\r\n+  const dbConnected = await testDatabaseConnection()\r\n+  \r\n+  if (!dbConnected) {\r\n+    Logger.error('Server startup failed due to database connection error')\r\n+    process.exit(1)\r\n+  }\r\n+\r\n+  httpServer.listen({ port: config.get('port') }, () => {\r\n+    Logger.info('Server Connected on port:', config.get('port'))\r\n+  })\r\n+}\r\n+\r\n+startServer()\r\n+\r\n+process.on('SIGTERM', gracefulShutDown)\r\n+process.on('SIGINT', gracefulShutDown)\r\n+process.on('SIGUSR2', gracefulShutDown)\r\n"
                },
                {
                    "date": 1754045597258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,18 +58,25 @@\n }\r\n \r\n // Start server only after database connection is established\r\n const startServer = async () => {\r\n-  Logger.info('Starting server initialization...')\r\n+  Logger.info('🚀 Starting server initialization...')\r\n+  Logger.info('⚙️  Server Configuration:')\r\n+  Logger.info('   - Port:', config.get('port'))\r\n+  Logger.info('   - Environment:', config.get('env'))\r\n+  Logger.info('   - Database:', config.get('sequelize.name'))\r\n+  \r\n   const dbConnected = await testDatabaseConnection()\r\n   \r\n   if (!dbConnected) {\r\n     Logger.error('Server startup failed due to database connection error')\r\n     process.exit(1)\r\n   }\r\n \r\n   httpServer.listen({ port: config.get('port') }, () => {\r\n-    Logger.info('Server Connected on port:', config.get('port'))\r\n+    Logger.info('🚀 Backend Server is running on port:', config.get('port'))\r\n+    Logger.info('📡 API Base URL: http://localhost:' + config.get('port'))\r\n+    Logger.info('🌐 Environment:', config.get('env'))\r\n   })\r\n }\r\n \r\n startServer()\r\n"
                },
                {
                    "date": 1754045717692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,12 +71,13 @@\n     Logger.error('Server startup failed due to database connection error')\r\n     process.exit(1)\r\n   }\r\n \r\n-  httpServer.listen({ port: config.get('port') }, () => {\r\n-    Logger.info('🚀 Backend Server is running on port:', config.get('port'))\r\n-    Logger.info('📡 API Base URL: http://localhost:' + config.get('port'))\r\n-    Logger.info('🌐 Environment:', config.get('env'))\r\n+  const port = config.get('port') || process.env.PORT || 5000\r\n+  httpServer.listen({ port: port }, () => {\r\n+    Logger.info('🚀 Backend Server is running on port:', port)\r\n+    Logger.info('📡 API Base URL: http://localhost:' + port)\r\n+    Logger.info('🌐 Environment:', config.get('env') || process.env.NODE_ENV || 'development')\r\n   })\r\n }\r\n \r\n startServer()\r\n"
                },
                {
                    "date": 1754045744070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,26 +58,29 @@\n }\r\n \r\n // Start server only after database connection is established\r\n const startServer = async () => {\r\n+  const port = config.get('port') || process.env.PORT || 5000\r\n+  const env = config.get('env') || process.env.NODE_ENV || 'development'\r\n+  const dbName = config.get('sequelize.name') || process.env.DB_NAME || 'unknown'\r\n+  \r\n   Logger.info('🚀 Starting server initialization...')\r\n   Logger.info('⚙️  Server Configuration:')\r\n-  Logger.info('   - Port:', config.get('port'))\r\n-  Logger.info('   - Environment:', config.get('env'))\r\n-  Logger.info('   - Database:', config.get('sequelize.name'))\r\n+  Logger.info('   - Port:', port)\r\n+  Logger.info('   - Environment:', env)\r\n+  Logger.info('   - Database:', dbName)\r\n   \r\n   const dbConnected = await testDatabaseConnection()\r\n   \r\n   if (!dbConnected) {\r\n     Logger.error('Server startup failed due to database connection error')\r\n     process.exit(1)\r\n   }\r\n \r\n-  const port = config.get('port') || process.env.PORT || 5000\r\n   httpServer.listen({ port: port }, () => {\r\n     Logger.info('🚀 Backend Server is running on port:', port)\r\n     Logger.info('📡 API Base URL: http://localhost:' + port)\r\n-    Logger.info('🌐 Environment:', config.get('env') || process.env.NODE_ENV || 'development')\r\n+    Logger.info('🌐 Environment:', env)\r\n   })\r\n }\r\n \r\n startServer()\r\n"
                },
                {
                    "date": 1754046264431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,67 @@\n import app from '@src/rest-resources'\r\n import socketServer from '@src/socket-resources'\r\n import gracefulShutDown from '@src/libs/gracefulShutDown'\r\n import { Logger } from '@src/libs/logger'\r\n+import passport from 'passport'\r\n+import GoogleStrategy from 'passport-google-oauth20'\r\n+import FacebookStrategy from 'passport-facebook'\r\n import db from '@src/db/models'\r\n+import jwt from 'jsonwebtoken'\r\n \r\n+passport.use(new GoogleStrategy({\r\n+  clientID: process.env.GOOGLE_CLIENT_ID,\r\n+  clientSecret: process.env.GOOGLE_CLIENT_SECRET,\r\n+  callbackURL: process.env.GOOGLE_CALLBACK_URL,\r\n+}, async (accessToken, refreshToken, profile, done) => {\r\n+  try {\r\n+    let user = await db.User.findOne({ where: { googleId: profile.id } });\r\n+    if (!user) {\r\n+      user = await db.User.create({\r\n+        googleId: profile.id,\r\n+        email: profile.emails[0].value,\r\n+        firstName: profile.name.givenName,\r\n+        lastName: profile.name.familyName,\r\n+        signInType: 'google',\r\n+        isEmailVerified: true\r\n+      });\r\n+    }\r\n+    const token = jwt.sign({ userId: user.userId }, process.env.JWT_LOGIN_SECRET, { expiresIn: '1d' });\r\n+    user.token = token;\r\n+    return done(null, user);\r\n+  } catch (err) {\r\n+    return done(err, null);\r\n+  }\r\n+}));\r\n+\r\n+passport.use(new FacebookStrategy({\r\n+  clientID: process.env.FACEBOOK_APP_ID,\r\n+  clientSecret: process.env.FACEBOOK_APP_SECRET,\r\n+  callbackURL: process.env.FACEBOOK_CALLBACK_URL,\r\n+  profileFields: ['id', 'emails', 'name']\r\n+}, async (accessToken, refreshToken, profile, done) => {\r\n+  try {\r\n+    let user = await db.User.findOne({ where: { facebookId: profile.id } });\r\n+    if (!user) {\r\n+      user = await db.User.create({\r\n+        facebookId: profile.id,\r\n+        email: profile.emails ? profile.emails[0].value : null,\r\n+        firstName: profile.name.givenName,\r\n+        lastName: profile.name.familyName,\r\n+        signInType: 'facebook',\r\n+        isEmailVerified: true\r\n+      });\r\n+    }\r\n+    const token = jwt.sign({ userId: user.userId }, process.env.JWT_LOGIN_SECRET, { expiresIn: '1d' });\r\n+    user.token = token;\r\n+    return done(null, user);\r\n+  } catch (err) {\r\n+    return done(err, null);\r\n+  }\r\n+}));\r\n+\r\n+app.use(passport.initialize());\r\n+\r\n const httpServer = createServer(app)\r\n \r\n socketServer.attach(httpServer)\r\n \r\n"
                },
                {
                    "date": 1754367369105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,21 +17,42 @@\n }, async (accessToken, refreshToken, profile, done) => {\r\n   try {\r\n     let user = await db.User.findOne({ where: { googleId: profile.id } });\r\n     if (!user) {\r\n-      user = await db.User.create({\r\n-        googleId: profile.id,\r\n-        email: profile.emails[0].value,\r\n-        firstName: profile.name.givenName,\r\n-        lastName: profile.name.familyName,\r\n-        signInType: 'google',\r\n-        isEmailVerified: true\r\n-      });\r\n+      // Check if user exists with same email\r\n+      if (profile.emails && profile.emails[0]) {\r\n+        user = await db.User.findOne({ where: { email: profile.emails[0].value } });\r\n+        if (user) {\r\n+          // Update existing user with Google ID\r\n+          await user.update({\r\n+            googleId: profile.id,\r\n+            signInType: 'google',\r\n+            isEmailVerified: true\r\n+          });\r\n+        }\r\n+      }\r\n+      \r\n+      if (!user) {\r\n+        user = await db.User.create({\r\n+          googleId: profile.id,\r\n+          email: profile.emails ? profile.emails[0].value : null,\r\n+          firstName: profile.name.givenName,\r\n+          lastName: profile.name.familyName,\r\n+          signInType: 'google',\r\n+          isEmailVerified: true,\r\n+          username: profile.emails ? profile.emails[0].value.split('@')[0] : `user_${Date.now()}`\r\n+        });\r\n+      }\r\n     }\r\n-    const token = jwt.sign({ userId: user.userId }, process.env.JWT_LOGIN_SECRET, { expiresIn: '1d' });\r\n+    \r\n+    // Update last login date\r\n+    await user.update({ lastLoginDate: new Date() });\r\n+    \r\n+    const token = jwt.sign({ userId: user.userId, type: 'login' }, process.env.JWT_LOGIN_SECRET, { expiresIn: '1d' });\r\n     user.token = token;\r\n     return done(null, user);\r\n   } catch (err) {\r\n+    console.error('Google SSO error:', err);\r\n     return done(err, null);\r\n   }\r\n }));\r\n \r\n@@ -43,21 +64,42 @@\n }, async (accessToken, refreshToken, profile, done) => {\r\n   try {\r\n     let user = await db.User.findOne({ where: { facebookId: profile.id } });\r\n     if (!user) {\r\n-      user = await db.User.create({\r\n-        facebookId: profile.id,\r\n-        email: profile.emails ? profile.emails[0].value : null,\r\n-        firstName: profile.name.givenName,\r\n-        lastName: profile.name.familyName,\r\n-        signInType: 'facebook',\r\n-        isEmailVerified: true\r\n-      });\r\n+      // Check if user exists with same email\r\n+      if (profile.emails && profile.emails[0]) {\r\n+        user = await db.User.findOne({ where: { email: profile.emails[0].value } });\r\n+        if (user) {\r\n+          // Update existing user with Facebook ID\r\n+          await user.update({\r\n+            facebookId: profile.id,\r\n+            signInType: 'facebook',\r\n+            isEmailVerified: true\r\n+          });\r\n+        }\r\n+      }\r\n+      \r\n+      if (!user) {\r\n+        user = await db.User.create({\r\n+          facebookId: profile.id,\r\n+          email: profile.emails ? profile.emails[0].value : null,\r\n+          firstName: profile.name.givenName,\r\n+          lastName: profile.name.familyName,\r\n+          signInType: 'facebook',\r\n+          isEmailVerified: true,\r\n+          username: profile.emails ? profile.emails[0].value.split('@')[0] : `user_${Date.now()}`\r\n+        });\r\n+      }\r\n     }\r\n-    const token = jwt.sign({ userId: user.userId }, process.env.JWT_LOGIN_SECRET, { expiresIn: '1d' });\r\n+    \r\n+    // Update last login date\r\n+    await user.update({ lastLoginDate: new Date() });\r\n+    \r\n+    const token = jwt.sign({ userId: user.userId, type: 'login' }, process.env.JWT_LOGIN_SECRET, { expiresIn: '1d' });\r\n     user.token = token;\r\n     return done(null, user);\r\n   } catch (err) {\r\n+    console.error('Facebook SSO error:', err);\r\n     return done(err, null);\r\n   }\r\n }));\r\n \r\n"
                },
                {
                    "date": 1754368515296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,8 +62,11 @@\n   callbackURL: process.env.FACEBOOK_CALLBACK_URL,\r\n   profileFields: ['id', 'emails', 'name']\r\n }, async (accessToken, refreshToken, profile, done) => {\r\n   try {\r\n+    console.log('Facebook SSO Profile:', JSON.stringify(profile, null, 2));\r\n+    console.log('Facebook SSO Access Token:', accessToken);\r\n+    \r\n     let user = await db.User.findOne({ where: { facebookId: profile.id } });\r\n     if (!user) {\r\n       // Check if user exists with same email\r\n       if (profile.emails && profile.emails[0]) {\r\n"
                }
            ],
            "date": 1753423521790,
            "name": "Commit-0",
            "content": "import { createServer } from 'http'\nimport config from '@src/configs/app.config'\nimport app from '@src/rest-resources'\nimport socketServer from '@src/socket-resources'\nimport gracefulShutDown from '@src/libs/gracefulShutDown'\nimport { Logger } from '@src/libs/logger'\nconst passport = require('passport');\nconst GoogleStrategy = require('passport-google-oauth20').Strategy;\nconst FacebookStrategy = require('passport-facebook').Strategy;\nconst db = require('./src/db/models');\nconst jwt = require('jsonwebtoken');\n\npassport.use(new GoogleStrategy({\n  clientID: process.env.GOOGLE_CLIENT_ID,\n  clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n  callbackURL: process.env.GOOGLE_CALLBACK_URL,\n}, async (accessToken, refreshToken, profile, done) => {\n  try {\n    let user = await db.User.findOne({ where: { googleId: profile.id } });\n    if (!user) {\n      user = await db.User.create({\n        googleId: profile.id,\n        email: profile.emails[0].value,\n        firstName: profile.name.givenName,\n        lastName: profile.name.familyName,\n        signInType: 'google',\n        isEmailVerified: true\n      });\n    }\n    const token = jwt.sign({ userId: user.userId }, process.env.JWT_LOGIN_SECRET, { expiresIn: '1d' });\n    user.token = token;\n    return done(null, user);\n  } catch (err) {\n    return done(err, null);\n  }\n}));\n\npassport.use(new FacebookStrategy({\n  clientID: process.env.FACEBOOK_APP_ID,\n  clientSecret: process.env.FACEBOOK_APP_SECRET,\n  callbackURL: process.env.FACEBOOK_CALLBACK_URL,\n  profileFields: ['id', 'emails', 'name']\n}, async (accessToken, refreshToken, profile, done) => {\n  try {\n    let user = await db.User.findOne({ where: { facebookId: profile.id } });\n    if (!user) {\n      user = await db.User.create({\n        facebookId: profile.id,\n        email: profile.emails ? profile.emails[0].value : null,\n        firstName: profile.name.givenName,\n        lastName: profile.name.familyName,\n        signInType: 'facebook',\n        isEmailVerified: true\n      });\n    }\n    const token = jwt.sign({ userId: user.userId }, process.env.JWT_LOGIN_SECRET, { expiresIn: '1d' });\n    user.token = token;\n    return done(null, user);\n  } catch (err) {\n    return done(err, null);\n  }\n}));\n\napp.use(passport.initialize());\n\nconst httpServer = createServer(app)\n\nsocketServer.attach(httpServer)\n\nhttpServer.listen({ port: config.get('port') }, () => {\n  Logger.info('Server Started', { message: `Listening On ${config.get('port')}` })\n})\n\nprocess.on('SIGTERM', gracefulShutDown)\nprocess.on('SIGINT', gracefulShutDown)\nprocess.on('SIGUSR2', gracefulShutDown)\n"
        }
    ]
}