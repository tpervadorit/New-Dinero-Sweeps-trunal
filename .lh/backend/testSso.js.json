{
    "sourceFile": "backend/testSso.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1754050696182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754050774011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,57 +1,1 @@\n-const db = require('./src/db/models');\r\n-\r\n-async function testSsoSetup() {\r\n-  console.log('=== Testing SSO Setup ===');\r\n-  \r\n-  // Check environment variables\r\n-  console.log('\\n1. Environment Variables:');\r\n-  console.log('GOOGLE_CLIENT_ID:', process.env.GOOGLE_CLIENT_ID ? 'SET' : 'MISSING');\r\n-  console.log('GOOGLE_CLIENT_SECRET:', process.env.GOOGLE_CLIENT_SECRET ? 'SET' : 'MISSING');\r\n-  console.log('GOOGLE_CALLBACK_URL:', process.env.GOOGLE_CALLBACK_URL ? 'SET' : 'MISSING');\r\n-  console.log('FACEBOOK_APP_ID:', process.env.FACEBOOK_APP_ID ? 'SET' : 'MISSING');\r\n-  console.log('FACEBOOK_APP_SECRET:', process.env.FACEBOOK_APP_SECRET ? 'SET' : 'MISSING');\r\n-  console.log('FACEBOOK_CALLBACK_URL:', process.env.FACEBOOK_CALLBACK_URL ? 'SET' : 'MISSING');\r\n-  console.log('JWT_LOGIN_SECRET:', process.env.JWT_LOGIN_SECRET ? 'SET' : 'MISSING');\r\n-  console.log('SSO_SUCCESS_REDIRECT:', process.env.SSO_SUCCESS_REDIRECT ? 'SET' : 'MISSING');\r\n-  \r\n-  try {\r\n-    // Test database connection\r\n-    console.log('\\n2. Testing Database Connection...');\r\n-    await db.sequelize.authenticate();\r\n-    console.log('✅ Database connected successfully');\r\n-    \r\n-    // Check if required columns exist\r\n-    console.log('\\n3. Checking Database Schema...');\r\n-    \r\n-    // Check users table\r\n-    const userColumns = await db.sequelize.query(\r\n-      \"SELECT column_name FROM information_schema.columns WHERE table_name = 'users'\",\r\n-      { type: db.sequelize.QueryTypes.SELECT }\r\n-    );\r\n-    const userColumnNames = userColumns.map(col => col.column_name);\r\n-    \r\n-    console.log('Users table columns:', userColumnNames);\r\n-    console.log('google_id exists:', userColumnNames.includes('google_id'));\r\n-    console.log('facebook_id exists:', userColumnNames.includes('facebook_id'));\r\n-    console.log('sign_in_type exists:', userColumnNames.includes('sign_in_type'));\r\n-    \r\n-    // Check user_details table\r\n-    const userDetailsColumns = await db.sequelize.query(\r\n-      \"SELECT column_name FROM information_schema.columns WHERE table_name = 'user_details'\",\r\n-      { type: db.sequelize.QueryTypes.SELECT }\r\n-    );\r\n-    const userDetailsColumnNames = userDetailsColumns.map(col => col.column_name);\r\n-    \r\n-    console.log('User_details table columns:', userDetailsColumnNames);\r\n-    console.log('zip exists:', userDetailsColumnNames.includes('zip'));\r\n-    console.log('coinflow_kyc_status exists:', userDetailsColumnNames.includes('coinflow_kyc_status'));\r\n-    \r\n-  } catch (error) {\r\n-    console.error('❌ Error:', error.message);\r\n-    console.error('Stack:', error.stack);\r\n-  } finally {\r\n-    await db.sequelize.close();\r\n-  }\r\n-}\r\n-\r\n-testSsoSetup(); \n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1754050696182,
            "name": "Commit-0",
            "content": "const db = require('./src/db/models');\r\n\r\nasync function testSsoSetup() {\r\n  console.log('=== Testing SSO Setup ===');\r\n  \r\n  // Check environment variables\r\n  console.log('\\n1. Environment Variables:');\r\n  console.log('GOOGLE_CLIENT_ID:', process.env.GOOGLE_CLIENT_ID ? 'SET' : 'MISSING');\r\n  console.log('GOOGLE_CLIENT_SECRET:', process.env.GOOGLE_CLIENT_SECRET ? 'SET' : 'MISSING');\r\n  console.log('GOOGLE_CALLBACK_URL:', process.env.GOOGLE_CALLBACK_URL ? 'SET' : 'MISSING');\r\n  console.log('FACEBOOK_APP_ID:', process.env.FACEBOOK_APP_ID ? 'SET' : 'MISSING');\r\n  console.log('FACEBOOK_APP_SECRET:', process.env.FACEBOOK_APP_SECRET ? 'SET' : 'MISSING');\r\n  console.log('FACEBOOK_CALLBACK_URL:', process.env.FACEBOOK_CALLBACK_URL ? 'SET' : 'MISSING');\r\n  console.log('JWT_LOGIN_SECRET:', process.env.JWT_LOGIN_SECRET ? 'SET' : 'MISSING');\r\n  console.log('SSO_SUCCESS_REDIRECT:', process.env.SSO_SUCCESS_REDIRECT ? 'SET' : 'MISSING');\r\n  \r\n  try {\r\n    // Test database connection\r\n    console.log('\\n2. Testing Database Connection...');\r\n    await db.sequelize.authenticate();\r\n    console.log('✅ Database connected successfully');\r\n    \r\n    // Check if required columns exist\r\n    console.log('\\n3. Checking Database Schema...');\r\n    \r\n    // Check users table\r\n    const userColumns = await db.sequelize.query(\r\n      \"SELECT column_name FROM information_schema.columns WHERE table_name = 'users'\",\r\n      { type: db.sequelize.QueryTypes.SELECT }\r\n    );\r\n    const userColumnNames = userColumns.map(col => col.column_name);\r\n    \r\n    console.log('Users table columns:', userColumnNames);\r\n    console.log('google_id exists:', userColumnNames.includes('google_id'));\r\n    console.log('facebook_id exists:', userColumnNames.includes('facebook_id'));\r\n    console.log('sign_in_type exists:', userColumnNames.includes('sign_in_type'));\r\n    \r\n    // Check user_details table\r\n    const userDetailsColumns = await db.sequelize.query(\r\n      \"SELECT column_name FROM information_schema.columns WHERE table_name = 'user_details'\",\r\n      { type: db.sequelize.QueryTypes.SELECT }\r\n    );\r\n    const userDetailsColumnNames = userDetailsColumns.map(col => col.column_name);\r\n    \r\n    console.log('User_details table columns:', userDetailsColumnNames);\r\n    console.log('zip exists:', userDetailsColumnNames.includes('zip'));\r\n    console.log('coinflow_kyc_status exists:', userDetailsColumnNames.includes('coinflow_kyc_status'));\r\n    \r\n  } catch (error) {\r\n    console.error('❌ Error:', error.message);\r\n    console.error('Stack:', error.stack);\r\n  } finally {\r\n    await db.sequelize.close();\r\n  }\r\n}\r\n\r\ntestSsoSetup(); "
        }
    ]
}