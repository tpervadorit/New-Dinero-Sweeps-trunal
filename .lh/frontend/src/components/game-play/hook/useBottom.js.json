{
    "sourceFile": "frontend/src/components/game-play/hook/useBottom.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1753936907137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753936916576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,8 +75,10 @@\n       enterFullscreen();\n     }\n   };\n   useEffect(() => {\n+    if (typeof window === 'undefined') return;\n+    \n     const handleFullscreenChange = () => {\n       setIsFullscreen(\n         !!(\n           document.fullscreenElement ||\n"
                }
            ],
            "date": 1753936907137,
            "name": "Commit-0",
            "content": "/* eslint-disable no-undef */\nimport { removeFav } from '@/services/deleteRequest';\nimport { addFav } from '@/services/postRequest';\nimport { useStateContext } from '@/store';\nimport { useParams } from 'next/navigation';\nimport { useEffect, useState } from 'react';\n\nconst useBottom = (gamePlayRef, isFavourite) => {\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const { gameId } = useParams();\n  const [favSucess, setFavSucess] = useState(isFavourite);\n  const handleFavoriteGame = () => {\n    handleFav({ gameId, isFav: favSucess });\n  };\n  useEffect(() => {\n    setFavSucess(isFavourite);\n  }, [isFavourite]);\n\n  const {\n    state: { user },\n  } = useStateContext();\n  const toggleFullscreen = () => {\n    if (typeof window === 'undefined') return;\n    if (!gamePlayRef.current) return;\n    const element = gamePlayRef.current;\n\n    const enterFullscreen = () => {\n      if (element.requestFullscreen) {\n        element.requestFullscreen();\n      } else if (element.webkitRequestFullscreen) {\n        element.webkitRequestFullscreen();\n      } else if (element.msRequestFullscreen) {\n        element.msRequestFullscreen();\n      } else {\n        // Fallback manual fullscreen styling\n        element.style.transform = 'scale(1)';\n        element.style.width = '100vw';\n        element.style.height = '100vh';\n        element.style.position = 'fixed';\n        element.style.top = '0';\n        element.style.left = '0';\n        element.style.zIndex = '9999';\n        element.style.backgroundColor = '#000';\n        if (typeof document !== 'undefined') {\n          document.body.style.overflow = 'hidden';\n        }\n      }\n      setIsFullscreen(true);\n    };\n\n    const exitFullscreen = () => {\n      if (typeof document !== 'undefined') {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        } else if (document.webkitExitFullscreen) {\n          document.webkitExitFullscreen();\n        } else {\n          // Remove fallback fullscreen styles\n          element.style.transform = '';\n          element.style.width = '';\n          element.style.height = '';\n          element.style.position = '';\n          element.style.top = '';\n          element.style.left = '';\n          element.style.zIndex = '';\n          element.style.backgroundColor = '';\n          document.body.style.overflow = '';\n        }\n      }\n      setIsFullscreen(false);\n    };\n    if (isFullscreen) {\n      exitFullscreen();\n    } else {\n      enterFullscreen();\n    }\n  };\n  useEffect(() => {\n    const handleFullscreenChange = () => {\n      setIsFullscreen(\n        !!(\n          document.fullscreenElement ||\n          document.webkitFullscreenElement ||\n          document.msFullscreenElement\n        )\n      );\n    };\n\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    document.addEventListener('webkitfullscreenchange', handleFullscreenChange);\n    document.addEventListener('msfullscreenchange', handleFullscreenChange);\n    return () => {\n      document.removeEventListener('fullscreenchange', handleFullscreenChange);\n      document.removeEventListener(\n        'webkitfullscreenchange',\n        handleFullscreenChange\n      );\n      document.removeEventListener(\n        'msfullscreenchange',\n        handleFullscreenChange\n      );\n    };\n  }, []);\n  const handleFav = async ({ gameId, isFav }) => {\n    if (isFav) {\n      await removeFav({\n        casinoGameId: parseInt(gameId),\n        userId: user?.userId,\n      });\n      setFavSucess(!favSucess);\n    } else {\n      try {\n        try {\n          await addFav({\n            casinoGameId: parseInt(gameId),\n            userId: user?.userId,\n          });\n          setFavSucess(!favSucess);\n        } catch (error) {\n          console.log('error', error);\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  };\n\n  return {\n    isFullscreen,\n    toggleFullscreen,\n    handleFavoriteGame,\n    favSucess,\n  };\n};\n\nexport default useBottom;\n"
        }
    ]
}