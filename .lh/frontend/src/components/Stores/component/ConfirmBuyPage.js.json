{
    "sourceFile": "frontend/src/components/Stores/component/ConfirmBuyPage.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754364715390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754364715390,
            "name": "Commit-0",
            "content": "'use client';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Image from 'next/image';\r\nimport { bitcoin, gpay, applepayss, credit, bank } from '@/assets/png';\r\nimport dynamic from 'next/dynamic';\r\nimport {\r\n  CoinflowGooglePayButton,\r\n  CoinflowApplePayButton,\r\n} from '@coinflowlabs/react';\r\nimport { getAccount } from '@/services/getRequests';\r\nimport { getUserDetails } from '@/services/getRequests';\r\nimport { useBankTransfer } from '../hooks/useBankTransfer';\r\nimport { makeAchPayment, WebHook } from '@/services/postRequest';\r\nconst TokenizeNewCard = dynamic(() => import('./TokenizeNewCard'), {\r\n  ssr: false,\r\n});\r\n\r\nconst ExistingCardPayment = dynamic(() => import('./ExistingCardPayment'), {\r\n  ssr: false,\r\n});\r\n\r\nimport useCoinFlowSessionKey from '../hooks/useCoinFlowSessionKey';\r\nimport ConfirmBuy from '@/components/Buy-Reedem/components/confirm-Buy';\r\nimport { cross } from '@/assets/svg';\r\nimport CustomToast from '@/common/components/custom-toaster';\r\n// import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\n\r\nconst ConfirmBuyPage = ({\r\n  selectedPackage,\r\n  setActive = () => {},\r\n  handleClick,\r\n  handleCloseDialog,\r\n  // merchantId,\r\n  // solanaWalletAddress,\r\n}) => {\r\n  const {\r\n    openPlaid,\r\n    loading: bankLoading,\r\n    error: bankError,\r\n    success: achPaymentSuccess,\r\n    currentStep,\r\n    fetchLinkToken,\r\n    showToast,\r\n    setShowToast,\r\n    toastMessage,\r\n    setToastMessage,\r\n    toastStatus,\r\n    setToastStatus,\r\n  } = useBankTransfer();\r\n\r\n  const [showBankUI, setShowBankUI] = useState(false);\r\n  const [accounts, setAccounts] = useState([]);\r\n  const [selectedAccount, setSelectedAccount] = useState('');\r\n\r\n  const [paymentSelected, setPaymentSelected] = useState(null);\r\n  const [showCryptoUI, setShowCryptoUI] = useState(false);\r\n  const [showCardUI, setShowCardUI] = useState(false);\r\n  // const [upiId, setUpiId] = useState('');\r\n  // const [upiError, setUpiError] = useState('');\r\n  const [userDetails, setUserDetails] = useState(null);\r\n  // const [selectedCryptoCurrency, setSelectedCryptoCurrency] = useState('');\r\n  const [processingPayment, setProcessingPayment] = useState(false);\r\n  const [paymentError, setPaymentError] = useState(null);\r\n  const [paymentSuccess, setPaymentSuccess] = useState(false);\r\n  const [selectedOption, setSelectedOption] = useState('new');\r\n  const [paymentStatus, setPaymentStatus] = useState('');\r\n  const [webhookInfo, setWebhookInfo] = useState(null);\r\n\r\n  const paymentMethods = [\r\n    { src: credit, alt: 'Credit Card', label: 'Credit Card', path: 'card' },\r\n    { src: gpay, alt: 'Google Pay', label: 'Google Pay', path: 'gpay' },\r\n    { src: applepayss, alt: 'Apple Pay', label: 'Apple Pay', path: 'apay' },\r\n    { src: bank, alt: 'Bank Transfer', label: 'Bank Transfer', path: 'bank' },\r\n    {\r\n      src: bitcoin,\r\n      alt: 'Crypto Currency',\r\n      label: 'Crypto Currency',\r\n      path: 'crypto',\r\n    },\r\n  ];\r\n\r\n  // const cryptoCurrencies = [\r\n  //   { src: bitcoin, alt: 'Bitcoin', label: 'Bitcoin', value: 'bitcoin' },\r\n  //   { src: bitcoin, alt: 'USDT', label: 'USDT', value: 'usdt' },\r\n  // ];\r\n\r\n  const [filteredMethods, setFilteredMethods] = useState(paymentMethods);\r\n  const { sessionKey, fetchSessionKey } = useCoinFlowSessionKey();\r\n\r\n  useEffect(() => {\r\n    const userAgent = typeof window !== 'undefined' ? navigator.userAgent : '';\r\n    const isSafari = /^((?!chrome|android).)*safari/i.test(userAgent);\r\n    const isChrome =\r\n      /Chrome/.test(userAgent) && /Google Inc/.test(navigator.vendor);\r\n    const isEdge = /Edg/.test(userAgent);\r\n\r\n    let filtered = [...paymentMethods];\r\n    if (isSafari)\r\n      filtered = filtered.filter((method) => method.path !== 'gpay');\r\n    else if (isChrome || isEdge)\r\n      filtered = filtered.filter((method) => method.path !== 'apay');\r\n\r\n    setFilteredMethods(filtered);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchUser = async () => {\r\n      try {\r\n        const response = await getUserDetails();\r\n        setUserDetails(response?.data);\r\n      } catch (err) {\r\n        console.error('Error fetching user details:', err);\r\n      }\r\n    };\r\n    fetchUser();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (showBankUI) {\r\n      const fetchAccounts = async () => {\r\n        try {\r\n          const response = await getAccount({ paymentType: 'ACH' });\r\n          const accountsData = response?.data?.data || [];\r\n          setAccounts(accountsData);\r\n\r\n          if (accountsData.length > 0) {\r\n            setSelectedAccount(accountsData[0].id || '');\r\n          } else {\r\n            setSelectedAccount('new');\r\n          }\r\n        } catch (err) {\r\n          console.error('Error fetching accounts:', err);\r\n          setAccounts([]);\r\n          setSelectedAccount('new');\r\n        }\r\n      };\r\n      fetchAccounts();\r\n    } else {\r\n      setAccounts([]);\r\n      setSelectedAccount('');\r\n    }\r\n  }, [showBankUI]);\r\n\r\n  const handlePaymentClick = async (path) => {\r\n    setPaymentSelected(null);\r\n    setShowBankUI(false);\r\n    setShowCryptoUI(false);\r\n    setShowCardUI(false);\r\n    // setUpiError('');\r\n    // setUpiId('');\r\n    // setSelectedCryptoCurrency('');\r\n    setPaymentError(null);\r\n    setPaymentSuccess(false);\r\n    setPaymentStatus('');\r\n\r\n    // fetchLinkToken();\r\n    // fetchSessionKey();\r\n    if (path === 'gpay') {\r\n      try {\r\n        fetchSessionKey();\r\n        const response = await WebHook({\r\n          userId: userDetails?.id,\r\n          packageId: selectedPackage?.id,\r\n          paymentType: 'GOOGLE',\r\n        });\r\n\r\n        const webhookData = response?.data?.data;\r\n\r\n        if (webhookData) {\r\n          setWebhookInfo(webhookData);\r\n          setPaymentSelected('gpay');\r\n        } else {\r\n          console.error('Invalid webhook response:', response?.errors);\r\n        }\r\n      } catch (err) {\r\n        console.error('Failed to fetch webhook info:', err);\r\n      }\r\n    } else if (path === 'bank') {\r\n      setPaymentSelected('bank');\r\n      setShowBankUI(true);\r\n      fetchLinkToken();\r\n    } else if (path === 'crypto') {\r\n      setPaymentSelected('crypto');\r\n      setShowCryptoUI(true);\r\n      setActive('confirmBuy');\r\n    } else if (path === 'card') {\r\n      fetchSessionKey();\r\n      setPaymentSelected('card');\r\n      setShowCardUI(true);\r\n    } else if (path === 'apay') {\r\n      try {\r\n        fetchSessionKey();\r\n        const response = await WebHook({\r\n          userId: userDetails?.id,\r\n          packageId: selectedPackage?.id,\r\n          paymentType: 'APPLE',\r\n        });\r\n\r\n        const webhookData = response?.data?.data;\r\n\r\n        if (webhookData) {\r\n          setWebhookInfo(webhookData);\r\n          setPaymentSelected('apay');\r\n        } else {\r\n          console.error('Invalid webhook response:', response?.errors);\r\n        }\r\n      } catch (err) {\r\n        console.error('Failed to fetch webhook info:', err);\r\n      }\r\n      // setPaymentSelected('apay');\r\n    } else {\r\n      setActive(path);\r\n    }\r\n  };\r\n\r\n  const handleBankAccountChange = (e) => {\r\n    const accountId = e.target.value;\r\n    setSelectedAccount(accountId);\r\n    setPaymentSuccess(false);\r\n    setPaymentError(null);\r\n  };\r\n\r\n  const handleConfirmBankPayment = async () => {\r\n    const selected = accounts.find(\r\n      (acc) => acc.id === parseInt(selectedAccount)\r\n    );\r\n    if (!selected) return;\r\n\r\n    try {\r\n      setProcessingPayment(true);\r\n      const response = await makeAchPayment({\r\n        firstName: userDetails?.firstName || 'Test',\r\n        lastName: userDetails?.lastName || 'User',\r\n        packageId: selectedPackage?.id || 59,\r\n        paymentType: 'ACH',\r\n        paymentDetailId: parseInt(selectedAccount),\r\n      });\r\n\r\n      setToastStatus(response?.data?.success ? 'success' : 'error');\r\n      setToastMessage(response?.data?.message);\r\n      setPaymentSuccess(true);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setPaymentError(err);\r\n    } finally {\r\n      setProcessingPayment(false);\r\n      setShowToast(true);\r\n    }\r\n  };\r\n\r\n  const handlePopupClose = () => {\r\n    setTimeout(() => {\r\n      handleCloseDialog();\r\n      handleClick();\r\n    }, 3000);\r\n  };\r\n\r\n  const getBankTransferStatus = () => {\r\n    if (processingPayment) return 'Processing bank transfer...';\r\n    switch (currentStep) {\r\n      case 'plaid':\r\n        return 'Connecting to your bank...';\r\n      case 'exchange':\r\n        return 'Verifying bank details...';\r\n      case 'payment':\r\n        return 'Processing payment...';\r\n      case 'complete':\r\n        return 'Payment successful!';\r\n      default:\r\n        return 'Connect your bank';\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!paymentStatus) return;\r\n\r\n    setToastStatus(\r\n      paymentStatus === 'Payment successful!' ? 'success' : 'error'\r\n    );\r\n    setToastMessage(paymentStatus);\r\n    setShowToast(true);\r\n  }, [paymentStatus]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"relative max-h-[500px] md:max-h-[600px] overflow-y-auto w-full mb-6 p-6 bg-[rgb(20,25,45)] rounded-xl shadow-lg text-white focus:outline-none border-none scrollbar-thin scrollable-Content\"\r\n        style={{ overflowY: 'auto', WebkitOverflowScrolling: 'touch' }}\r\n      >\r\n        <div className=\"mb-2\">\r\n          <h1 className=\"text-green-300 text-lg font-semibold flex items-center gap-2\">\r\n            <svg viewBox=\"0 0 24 24\" className=\"w-5 h-5 fill-current\">\r\n              <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\" />\r\n            </svg>\r\n            Secure Checkout\r\n          </h1>\r\n          <Image\r\n            src={cross}\r\n            alt=\"close\"\r\n            height={20}\r\n            width={20}\r\n            className=\"absolute top-4 right-4 scale-125 cursor-pointer invert hover:bg-gray-500 rounded-xl\"\r\n            onClick={handleClick}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"text-sm\">\r\n          <p className=\"mb-1 font-medium\">You Will Receive</p>\r\n          <div className=\"p-3 rounded-lg flex flex-col gap-1 bg-[rgb(33,40,83)] mb-4\">\r\n            <p>GC Coin: {selectedPackage?.gcCoin}</p>\r\n            <p>+ SC Cash: {selectedPackage?.scCoin}</p>\r\n          </div>\r\n\r\n          <p className=\"mb-1 font-medium\">Choose Payment Type</p>\r\n          <div className=\"mt-5 text-gray-400 text-sm\">\r\n            <div className=\"flex gap-4 justify-between flex-wrap\">\r\n              {filteredMethods.map(({ src, alt, label, path }, idx) =>\r\n                path === 'gpay' ? (\r\n                  <button\r\n                    key={idx}\r\n                    onClick={() => handlePaymentClick(path)}\r\n                    className=\"cursor-pointer flex flex-col items-center justify-center gap-1 w-16 h-20 bg-[rgb(20,25,45)] hover:bg-[rgb(33,40,83)] p-2 rounded-lg transition ease-in-out duration-200\"\r\n                    type=\"button\"\r\n                    aria-label=\"Google Pay\"\r\n                  >\r\n                    <Image\r\n                      src={src}\r\n                      alt={alt}\r\n                      width={30}\r\n                      height={30}\r\n                      className=\"mb-1\"\r\n                    />\r\n                    <p className=\"text-xs\">{label}</p>\r\n                  </button>\r\n                ) : (\r\n                  <button\r\n                    key={idx}\r\n                    onClick={() => handlePaymentClick(path)}\r\n                    className=\"cursor-pointer flex flex-col items-center justify-center gap-1 w-16 h-20 bg-[rgb(20,25,45)] hover:bg-[rgb(33,40,83)] p-2 rounded-lg transition ease-in-out duration-200\"\r\n                  >\r\n                    <Image\r\n                      src={src}\r\n                      alt={alt}\r\n                      width={30}\r\n                      height={30}\r\n                      className=\"mb-1\"\r\n                    />\r\n                    <p className=\"text-xs\">{label}</p>\r\n                  </button>\r\n                )\r\n              )}\r\n            </div>\r\n          </div>\r\n          {paymentSelected === 'apay' && webhookInfo && (\r\n            <div className=\"mt-4\">\r\n              <CoinflowApplePayButton\r\n                env={'sandbox'}\r\n                sessionKey={sessionKey}\r\n                merchantId={process.env.NEXT_PUBLIC_DEFAULT_MERCHANT_ID || ''}\r\n                handleHeightChange={() => {}}\r\n                webhookInfo={webhookInfo}\r\n                subtotal={{\r\n                  cents: selectedPackage.amount * 100,\r\n                  currency: 'USD',\r\n                }}\r\n                color={'black' | 'white'}\r\n                onSuccess={() => {\r\n                  setPaymentStatus('Payment successful!');\r\n                }}\r\n                onError={(error) => {\r\n                  console.error('Apple Pay error:', error);\r\n                  setPaymentStatus(`Payment failed: ${error.message}`);\r\n                }}\r\n              />\r\n              {/* {paymentStatus &&\r\n                (() => {\r\n                  setToastStatus(\r\n                    paymentStatus === 'Payment successful!'\r\n                      ? 'success'\r\n                      : 'error'\r\n                  );\r\n                  setToastMessage(paymentStatus);\r\n                  setShowToast(true);\r\n                })()} */}\r\n              {paymentStatus && (\r\n                <div className=\"mt-3 p-2 bg-gray-800 rounded-md\">\r\n                  <p className=\"text-sm\">Status: {paymentStatus}</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          {paymentSelected === 'gpay' && webhookInfo && (\r\n            <div\r\n              className=\"my-6 mx-auto rounded-xl flex flex-col justify-center items-center\"\r\n              style={{\r\n                height: '40px',\r\n                width: '50%',\r\n              }}\r\n            >\r\n              <CoinflowGooglePayButton\r\n                env=\"sandbox\"\r\n                sessionKey={sessionKey}\r\n                merchantId={process.env.NEXT_PUBLIC_DEFAULT_MERCHANT_ID || ''}\r\n                handleHeightChange={() => {}}\r\n                webhookInfo={webhookInfo}\r\n                subtotal={{\r\n                  cents: selectedPackage.amount * 100,\r\n                  currency: 'USD',\r\n                }}\r\n                color=\"white\"\r\n                onSuccess={() => {\r\n                  setPaymentStatus('Payment successful!');\r\n                }}\r\n                onError={(error) => {\r\n                  console.error('Google Pay error:', error);\r\n                  setPaymentStatus(`Payment failed: ${error.message}`);\r\n                }}\r\n              />\r\n              {paymentStatus && (\r\n                <div className=\"mt-3 p-2 bg-gray-800 rounded-md\">\r\n                  <p className=\"text-sm\">Status: {paymentStatus}</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          {showBankUI && (\r\n            <div className=\"mt-4\">\r\n              <p className=\"font-semibold text-white/80\">\r\n                When creating new account please select Account type as\r\n                &quot;checking&quot; or &quot;savings&quot;\r\n              </p>\r\n              <button\r\n                value=\"new\"\r\n                onClick={() => {\r\n                  handleClick();\r\n                  handleCloseDialog();\r\n                  openPlaid();\r\n                }}\r\n                className=\"mt-2 mb-4  px-4 py-2 bg-green-600 hover:bg-green-700 rounded-md \"\r\n              >\r\n                Add new Account\r\n              </button>\r\n              {accounts.length > 0 && (\r\n                <div>\r\n                  <label\r\n                    htmlFor=\"bankAccountSelect\"\r\n                    className=\"block mb-2 font-medium text-white\"\r\n                  >\r\n                    Select Existing Bank Account\r\n                  </label>\r\n                  <select\r\n                    id=\"bankAccountSelect\"\r\n                    onChange={handleBankAccountChange}\r\n                    value={selectedAccount || 'new'}\r\n                    size={5}\r\n                    className=\"w-full p-2 rounded-md text-black bg-gray-100 border-0 focus:outline-none focus:ring-2 focus:ring-green-500 mb-4 overflow-y-auto max-h-40\"\r\n                    style={{\r\n                      scrollbarWidth: 'none',\r\n                      msOverflowStyle: 'none',\r\n                      overflowY: 'auto',\r\n                      maxHeight: '8rem',\r\n                    }}\r\n                  >\r\n                    {accounts.map((account) => (\r\n                      <option key={account.id} value={account.id}>\r\n                        {account.paymentType} - {account.lastFourDigits}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n\r\n                  <button\r\n                    onClick={async () => {\r\n                      await handleConfirmBankPayment();\r\n                      handlePopupClose();\r\n                    }}\r\n                    className=\"mb-4 px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-md text-white\"\r\n                    disabled={\r\n                      !selectedAccount ||\r\n                      selectedAccount === 'new' ||\r\n                      processingPayment\r\n                    }\r\n                  >\r\n                    {processingPayment ? 'Processing...' : 'Confirm Payment'}\r\n                  </button>\r\n                </div>\r\n              )}\r\n\r\n              {(bankLoading || processingPayment) && (\r\n                <p className=\"mt-1\">{getBankTransferStatus()}</p>\r\n              )}\r\n              {(bankError || paymentError) && (\r\n                <p className=\"text-red-500\">\r\n                  Error:{' '}\r\n                  {(bankError || paymentError)?.message ||\r\n                    String(bankError || paymentError)}\r\n                </p>\r\n              )}\r\n              {(achPaymentSuccess || paymentSuccess) && (\r\n                <p className=\"text-green-500\">\r\n                  We have received your ACH payment Request. Its now being\r\n                  processed and will be completed shortly.\r\n                </p>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          {showCryptoUI && <ConfirmBuy selectedPackage={selectedPackage} />}\r\n\r\n          {showCardUI && (\r\n            <div className=\"flex gap-4 mb-4 mt-4\">\r\n              <button\r\n                className={`px-4 py-2 rounded ${\r\n                  selectedOption === 'new'\r\n                    ? 'bg-green-500 text-white'\r\n                    : 'bg-blue-500 text-white'\r\n                }`}\r\n                onClick={() => setSelectedOption('new')}\r\n              >\r\n                New Card\r\n              </button>\r\n              <button\r\n                className={`px-4 py-2 rounded ${\r\n                  selectedOption === 'existing'\r\n                    ? 'bg-green-500 text-white'\r\n                    : 'bg-blue-500 text-white'\r\n                }`}\r\n                onClick={() => setSelectedOption('existing')}\r\n              >\r\n                Existing Card\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n          {selectedOption === 'new' && showCardUI && (\r\n            <div className=\"mt-4\" style={{ maxWidth: '100%' }}>\r\n              <TokenizeNewCard\r\n                selectedPackage={selectedPackage}\r\n                handleClick={handleClick}\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          {showCardUI && selectedOption === 'existing' && (\r\n            <div className=\"mt-4\" style={{ maxWidth: '100%' }}>\r\n              <ExistingCardPayment\r\n                selectedPackage={selectedPackage}\r\n                handleClick={handleClick}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <CustomToast\r\n        showToast={showToast}\r\n        setShowToast={setShowToast}\r\n        message={toastMessage}\r\n        status={toastStatus}\r\n        duration={2000}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ConfirmBuyPage;\r\n"
        }
    ]
}