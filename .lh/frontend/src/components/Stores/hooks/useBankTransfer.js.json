{
    "sourceFile": "frontend/src/components/Stores/hooks/useBankTransfer.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753936871775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753936871775,
            "name": "Commit-0",
            "content": "import { useState, useEffect, useCallback } from 'react';\nimport { getPlaidLinkToken } from '@/services/postRequest';\nimport { exchangePlaidToken } from '@/services/postRequest';\nimport { getAccount } from '@/services/getRequests';\n\nexport function useBankTransfer() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(false);\n  const [linkToken, setLinkToken] = useState(null);\n  const [plaidLoaded, setPlaidLoaded] = useState(false);\n  const [currentStep, setCurrentStep] = useState('ready');\n  const [accountsInfo, setAccountsInfo] = useState([]);\n\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [toastStatus, setToastStatus] = useState('success');\n\n  const fetchLinkToken = async () => {\n    try {\n      const response = await getPlaidLinkToken();\n      const token = response?.data?.data?.link_token;\n      if (!token) {\n        throw new Error(response.error || 'Failed to get Plaid link token');\n      }\n      setLinkToken(token);\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  const fetchUserAccounts = useCallback(async () => {\n    try {\n      const response = await getAccount({ paymentType: 'ACH' });\n      if (!response)\n        throw new Error(response.errors || 'Failed to fetch accounts');\n      // if (!Array.isArray(response?.data))\n      //   throw new Error('Invalid accounts data format');\n\n      setAccountsInfo(response.data);\n      setCurrentStep('ready');\n      return response?.data;\n    } catch (error) {\n      setError(error.message);\n      setCurrentStep('ready');\n      return [];\n    }\n  }, []);\n\n  // Load Plaid script\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    \n    if (window.Plaid) {\n      setPlaidLoaded(true);\n      return;\n    }\n    const script = document.createElement('script');\n    script.src = 'https://cdn.plaid.com/link/v2/stable/link-initialize.js';\n    script.async = true;\n\n    script.onload = () => {\n      setPlaidLoaded(true);\n    };\n\n    script.onerror = () => {\n      setError('Failed to load Plaid. Please refresh the page.');\n    };\n\n    document.body.appendChild(script);\n\n    return () => {\n      if (document.body.contains(script)) {\n        document.body.removeChild(script);\n      }\n    };\n  }, []);\n\n  const exchangeToken = useCallback(async (publicToken) => {\n    try {\n      const response = await exchangePlaidToken({ publicToken });\n\n      const { paymentDetailId } = response.data;\n      await fetchUserAccounts();\n      \n      setToastStatus(response?.data?.success ? 'success' : 'error');\n      setToastMessage(response?.data?.message);\n      \n\n      return { paymentDetailId, bankDetails: response.data };\n    } catch (error) {\n      setError(error.message);\n      setCurrentStep('ready');\n      throw error;\n    }\n    finally{\n      setShowToast(true);\n    }\n  }, []);\n\n  const makeAchPayment = useCallback(async (paymentDetailId) => {\n    try {\n      setCurrentStep('payment');\n      setError(null);\n\n      const response = await makeAchPayment(paymentDetailId);\n      if (!response.ok) throw new Error(response.error || 'ACH payment failed');\n\n      setSuccess(true);\n      setCurrentStep('complete');\n      return response.data;\n    } catch (error) {\n      setError(error.message);\n      setCurrentStep('ready');\n      throw error;\n    }\n  }, []);\n\n  const openPlaid = useCallback(() => {\n    if (!plaidLoaded || !linkToken) {\n      setError('Plaid is still loading or token missing.');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    setSuccess(false);\n    setCurrentStep('plaid');\n\n    const handler = window.Plaid.create({\n      token: linkToken,\n      env: 'sandbox',\n      onSuccess: async (publicToken) => {\n        try {\n          const response = await exchangeToken(publicToken);\n\n          setToastStatus(response?.bankDetails.success ? 'success' : 'error');\n          setToastMessage(response?.bankDetails.message);\n          \n        } catch (err) {\n          setError(err.message);\n        } finally {\n          setLoading(false);\n          setShowToast(true);\n        }\n      },\n      onExit: () => {\n        setLoading(false);\n        setCurrentStep('ready');\n        // setError(err?.display_message || err?.message || 'Exited Plaid');\n      },\n      onEvent: (eventName, metadata) => {\n        console.log('Plaid event:', eventName, metadata);\n      },\n    });\n\n    handler.open();\n  }, [plaidLoaded, linkToken, exchangeToken]);\n\n  const selectAccountAndPay = useCallback(\n    async (paymentDetailId) => {\n      setLoading(true);\n      setError(null);\n      setSuccess(false);\n      try {\n        const result = await makeAchPayment(paymentDetailId);\n        return result;\n      } catch (err) {\n        setError(err.message);\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [makeAchPayment]\n  );\n\n  return {\n    openPlaid,\n    loading,\n    error,\n    success,\n    currentStep,\n    plaidLoaded,\n    accountsInfo,\n    selectAccountAndPay,\n    fetchLinkToken,\n    showToast,\n    setShowToast,\n    toastMessage,\n    setToastMessage,\n    toastStatus,\n    setToastStatus,\n  };\n}\n"
        }
    ]
}