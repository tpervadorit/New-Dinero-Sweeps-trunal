{
    "sourceFile": "frontend/src/components/Chat/hooks/useSendChat.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753936928833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753936928833,
            "name": "Commit-0",
            "content": "/* eslint-disable no-undef */\n\nimport { toast } from '@/hooks/use-toast';\nimport { useStateContext } from '@/store';\nimport { useEffect, useRef, useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\nconst useSendChat = ({ sendMessage }) => {\n  const {\n    state: { user },\n  } = useStateContext();\n  const { control, handleSubmit, reset, setValue } = useForm();\n  const textareaRef = useRef(null);\n  const [characterCount, setCharacterCount] = useState(0);\n  const [error, setError] = useState('');\n  const [isPickerOpen, setIsPickerOpen] = useState(false);\n  const [isGifOpen, setIsGifOpen] = useState(false);\n  const pickerRef = useRef(null);\n  const handleGifClick = () => {\n    // if (user?.wagered > 50 ) {\n    setIsGifOpen(!isGifOpen);\n    setError('');\n    // } else {\n    //   toast({\n    //     description: 'Yor need wager over 50 SC to use the gif feature.',\n    //     className:\n    //       'fixed bottom-[110px] right-4 z-50 w-[55%] sm:w-[45%] md:w-[30%] text-black font-semibold border shadow-lg rounded-md p-4 bg-red-400 border-red-50',\n    //   });\n    // }\n  };\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    \n    const handleClickOutside = (event) => {\n      if (pickerRef.current && !pickerRef.current.contains(event.target)) {\n        setIsGifOpen(!isGifOpen);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [isGifOpen]);\n  const autoResizeTextarea = () => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      const scrollHeight = textarea.scrollHeight;\n      const maxHeight = 4 * parseFloat(getComputedStyle(textarea).lineHeight);\n      textarea.style.height = `${Math.min(scrollHeight, maxHeight)}px`;\n    }\n  };\n\n  const handleEmojiSelect = (emoji) => {\n    const emojiValue = emoji?.native;\n    const textarea = textareaRef.current;\n\n    if (textarea) {\n      const cursorPosition = textarea.selectionStart;\n      const textBefore = textarea.value.substring(0, cursorPosition);\n      const textAfter = textarea.value.substring(cursorPosition);\n      const newValue = `${textBefore}${emojiValue}${textAfter}`;\n      setValue('message', newValue);\n      setCharacterCount(newValue.length);\n      textarea.focus();\n\n      if (newValue.length > 200) {\n        setError('Message exceeds 200 characters.');\n      } else {\n        setError('');\n      }\n    }\n  };\n\n  const handleGifSelect = (gif) => {\n    setError('');\n    const gifValue = gif?.url;\n    onSubmit({ message: gifValue, isGif: true });\n    setIsGifOpen(!isGifOpen);\n  };\n\n  const onSubmit = async (data) => {\n    const { message, isGif = false } = data;\n    if (characterCount > 200) {\n      setError('Message exceeds 200 characters.');\n      return;\n    }\n    if (message.trim() === '') {\n      setError('Message cannot be empty.');\n      return;\n    }\n    if (user?.email) {\n      const payload = {\n        message: message,\n        isprivate: false,\n        messageType: isGif ? 'GIF' : 'MESSAGE',\n      };\n      sendMessage(payload, 'SEND_MESSAGE');\n      reset();\n      setCharacterCount(0);\n      setError('');\n    } else {\n      toast({\n        description: 'You need verify email to speak in the chatroom.',\n        className:\n          'fixed bottom-[110px] right-4 z-50 w-[55%] sm:w-[45%] md:w-[30%] text-black font-semibold border shadow-lg rounded-md p-4 bg-red-400 border-red-50',\n      });\n    }\n  };\n\n  const handleInputChange = () => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      const currentLength = textarea.value.length;\n      setCharacterCount(currentLength);\n      if (currentLength > 200) {\n        setError('Message exceeds 200 characters.');\n      } else {\n        setError('');\n      }\n    }\n  };\n\n  return {\n    control,\n    handleSubmit,\n    onSubmit,\n    autoResizeTextarea,\n    textareaRef,\n    handleEmojiSelect,\n    characterCount,\n    error,\n    handleInputChange,\n    isPickerOpen,\n    setIsPickerOpen,\n    isGifOpen,\n    setIsGifOpen,\n    handleGifSelect,\n    pickerRef,\n    handleGifClick,\n  };\n};\n\nexport default useSendChat;\n"
        }
    ]
}