{
    "sourceFile": "frontend/src/components/LoginSignup/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1753424582912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754366796448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,192 +1,221 @@\n-'use client';\n-import UserForm from './UserForm';\n-import {\n-  Dialog,\n-  DialogContent,\n-  DialogHeader,\n-  DialogTitle,\n-} from '@/components/ui/dialog';\n-import { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';\n-import { useState, useEffect } from 'react';\n-import { useRouter } from 'next/navigation';\n-import { FORGOT_PASSWORD, SIGNIN, SIGNUP } from './constant';\n-import { getAccessToken } from '@/services/storageUtils';\n-import { isEmpty } from '@/lib/utils';\n-import { usePathname, useSearchParams } from 'next/navigation';\n-import CustomToast from '@/common/components/custom-toaster';\n-import useSignup from './hooks/useSignup';\n-import useGeoLocation from '@/common/hook/useGeoLocation';\n-// import { jungle } from '@/assets/png';\n-// import { mobileiImage } from '@/assets/png';\n-\n-const LoginSignup = () => {\n-  const router = useRouter();\n-  const isToken = getAccessToken();\n-\n-  const searchParams = useSearchParams();\n-  const pathname = usePathname();\n-  const newPasswordKey = searchParams.get('newPasswordKey');\n-\n-  const [open, setOpen] = useState(isEmpty(isToken));\n-  const [isForgotPassword, setIsForgotPassword] = useState(false);\n-  const [toastState, setToastState] = useState({\n-    showToast: false,\n-    message: '',\n-    status: '',\n-  });\n-\n-  const { showToast, message, status } = toastState;\n-\n-  const { signupData, signupLoading } = useSignup();\n-  const location = useGeoLocation();\n-\n-  useEffect(() => {\n-    if (isEmpty(getAccessToken())) {\n-      setOpen(true);\n-    }\n-  }, [router]);\n-\n-  useEffect(() => {\n-    if (location.loaded && !location.error) {\n-      console.log('User geolocation:', location.coordinates);\n-    }\n-  }, [location]);\n-\n-  if (pathname === '/reset-password' && newPasswordKey) {\n-    return null;\n-  }\n-\n-  return (\n-    <>\n-      <Dialog\n-        open={open}\n-        onOpenChange={(isOpen) =>\n-          isOpen && !isEmpty(getAccessToken()) && setOpen(isOpen)\n-        }\n-        modal\n-        className=\"w-full\"\n-      >\n-        <DialogContent\n-          onPointerDownOutside={(e) => e.preventDefault()}\n-          className=\"p-2 border-radius-0 gap-0 w-full sm:w-[800px] max-w-[98%] flex border-none\"\n-        >\n-          <DialogTitle />\n-          <DialogHeader className=\"w-full\">\n-            <div className=\"flex w-full h-full flex-col sm:flex-row\">\n-\n-              {/* âœ… Mobilei Banner Image (only shown on mobilei) */}\n-              {/* <div className=\"w-full h-[200px] mb-4 sm:hidden flex justify-center items-center\">\n-  <img\n-    // src={jungle.src}\n-    alt=\"Mobile Banner\"\n-    className=\"w-full h-full object-cover\"\n-  />\n-</div> */}\n-\n-              {/* Left Side: Tabs for Sign Up / Sign In */}\n-              <Tabs defaultValue=\"signIn\" className=\"w-full sm:w-1/2 p-2 flex flex-col\">\n-                <TabsList className=\"bg-dark-blue w-full text-gray-400\">\n-                  <TabsTrigger\n-                    className=\"w-1/2 py-2 text-center font-semibold focus:outline-none aria-selected:text-white aria-selected:text-[22px] aria-selected:border-b-2 aria-selected:border-green-500\"\n-                    value=\"signUp\"\n-                    style={{ color: '#fff' }}\n-                    onClick={() => setIsForgotPassword(false)}\n-                  >\n-                    Sign Up\n-                  </TabsTrigger>\n-                  <TabsTrigger\n-                    className=\"w-1/2 py-2 text-center font-semibold focus:outline-none aria-selected:text-white aria-selected:text-[22px] aria-selected:border-b-2 aria-selected:border-green-500\"\n-                    value=\"signIn\"\n-                    style={{ color: '#fff' }}\n-                    onClick={() => setIsForgotPassword(false)}\n-                  >\n-                    Sign In\n-                  </TabsTrigger>\n-                </TabsList>\n-\n-                <TabsContent value=\"signUp\" className=\"flex-grow p-4\">\n-                  <div className=\"h-full flex flex-col\">\n-                    <UserForm\n-                      controls={SIGNUP}\n-                      isSignUp={true}\n-                      setOpen={setOpen}\n-                      setToastState={setToastState}\n-                    />\n-                  </div>\n-                </TabsContent>\n-\n-                <TabsContent value=\"signIn\" className=\"flex-grow p-4\">\n-                  <div className=\"h-full flex flex-col\">\n-                    {isForgotPassword ? (\n-                      <>\n-                        <p className=\"text-[rgb(var(--lb-blue-250))] text-[14px] mb-2\">\n-                          Please enter your email. We will send you a reset link for new password.\n-                        </p>\n-                        <UserForm\n-                          controls={FORGOT_PASSWORD}\n-                          setOpen={setOpen}\n-                          setIsForgotPassword={setIsForgotPassword}\n-                          isForgotPassword={isForgotPassword}\n-                          setToastState={setToastState}\n-                        />\n-                      </>\n-                    ) : (\n-                      <UserForm\n-                        controls={SIGNIN}\n-                        setOpen={setOpen}\n-                        setIsForgotPassword={setIsForgotPassword}\n-                        setToastState={setToastState}\n-                      />\n-                    )}\n-                  </div>\n-                </TabsContent>\n-              </Tabs>\n-\n-              {/* Right Side: Desktop Banner Image (shown only on desktop) */}\n-              <div className=\"w-1/2 relative justify-center items-center max-[899px]:hidden sm:flex\">\n-                {signupLoading ? (\n-                  <p className=\"text-white text-center\">Loading banner...</p>\n-                ) : signupData?.length > 0 ? (\n-                  signupData.map((banner, index) => (\n-                    <a\n-                      key={index}\n-                      href={banner?.imageUrl || '#'}\n-                      target=\"_blank\"\n-                      rel=\"noopener noreferrer\"\n-                      className=\"w-full\"\n-                    >\n-                      <img\n-                        src={banner?.imageUrl || 'https://luckybird.io/img/back.47e88397.png'}\n-                        alt={`banner-${index}`}\n-                        className=\"h-[434px] w-full max-h-[434px] object-cover object-right\"\n-                      />\n-                    </a>\n-                  ))\n-                ) : (\n-                  <img\n-                    src=\"https://luckybird.io/img/back.47e88397.png\"\n-                    alt=\"default banner\"\n-                    className=\"h-auto w-full max-h-[434px] object-cover\"\n-                  />\n-                )}\n-              </div>\n-            </div>\n-          </DialogHeader>\n-        </DialogContent>\n-      </Dialog>\n-\n-      {/* Toast Notification */}\n-      <CustomToast\n-        showToast={showToast}\n-        setShowToast={(val) =>\n-          setToastState((prev) => ({ ...prev, showToast: val }))\n-        }\n-        message={message}\n-        status={status}\n-        duration={2000}\n-      />\n-    </>\n-  );\n-};\n-\n-export default LoginSignup;\n+'use client';\r\n+import UserForm from './UserForm';\r\n+import {\r\n+  Dialog,\r\n+  DialogContent,\r\n+  DialogHeader,\r\n+  DialogTitle,\r\n+} from '@/components/ui/dialog';\r\n+import { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';\r\n+import { useState, useEffect } from 'react';\r\n+import { useRouter } from 'next/navigation';\r\n+import { FORGOT_PASSWORD, SIGNIN, SIGNUP } from './constant';\r\n+import { getAccessToken } from '@/services/storageUtils';\r\n+import { isEmpty } from '@/lib/utils';\r\n+import { usePathname, useSearchParams } from 'next/navigation';\r\n+import CustomToast from '@/common/components/custom-toaster';\r\n+import useSignup from './hooks/useSignup';\r\n+import useGeoLocation from '@/common/hook/useGeoLocation';\r\n+// import { jungle } from '@/assets/png';\r\n+// import { mobileiImage } from '@/assets/png';\r\n+\r\n+const LoginSignup = () => {\r\n+  const router = useRouter();\r\n+  const isToken = getAccessToken();\r\n+\r\n+  const searchParams = useSearchParams();\r\n+  const pathname = usePathname();\r\n+  const newPasswordKey = searchParams.get('newPasswordKey');\r\n+\r\n+  const [open, setOpen] = useState(isEmpty(isToken));\r\n+  const [isForgotPassword, setIsForgotPassword] = useState(false);\r\n+  const [toastState, setToastState] = useState({\r\n+    showToast: false,\r\n+    message: '',\r\n+    status: '',\r\n+  });\r\n+\r\n+  const { showToast, message, status } = toastState;\r\n+\r\n+  const { signupData, signupLoading } = useSignup();\r\n+  const location = useGeoLocation();\r\n+\r\n+  useEffect(() => {\r\n+    const token = getAccessToken();\r\n+    if (isEmpty(token)) {\r\n+      setOpen(true);\r\n+    } else {\r\n+      setOpen(false);\r\n+    }\r\n+  }, [router]);\r\n+\r\n+  // Listen for storage changes (when token is added/removed)\r\n+  useEffect(() => {\r\n+    const handleStorageChange = () => {\r\n+      const token = getAccessToken();\r\n+      if (isEmpty(token)) {\r\n+        setOpen(true);\r\n+      } else {\r\n+        setOpen(false);\r\n+      }\r\n+    };\r\n+\r\n+    window.addEventListener('storage', handleStorageChange);\r\n+    \r\n+    // Also check when the component mounts and when window gains focus\r\n+    const handleFocus = () => {\r\n+      handleStorageChange();\r\n+    };\r\n+\r\n+    window.addEventListener('focus', handleFocus);\r\n+\r\n+    return () => {\r\n+      window.removeEventListener('storage', handleStorageChange);\r\n+      window.removeEventListener('focus', handleFocus);\r\n+    };\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (location.loaded && !location.error) {\r\n+      console.log('User geolocation:', location.coordinates);\r\n+    }\r\n+  }, [location]);\r\n+\r\n+  if (pathname === '/reset-password' && newPasswordKey) {\r\n+    return null;\r\n+  }\r\n+\r\n+  return (\r\n+    <>\r\n+      <Dialog\r\n+        open={open}\r\n+        onOpenChange={(isOpen) =>\r\n+          isOpen && !isEmpty(getAccessToken()) && setOpen(isOpen)\r\n+        }\r\n+        modal\r\n+        className=\"w-full\"\r\n+      >\r\n+        <DialogContent\r\n+          onPointerDownOutside={(e) => e.preventDefault()}\r\n+          className=\"p-2 border-radius-0 gap-0 w-full sm:w-[800px] max-w-[98%] flex border-none\"\r\n+        >\r\n+          <DialogTitle />\r\n+          <DialogHeader className=\"w-full\">\r\n+            <div className=\"flex w-full h-full flex-col sm:flex-row\">\r\n+\r\n+              {/* âœ… Mobilei Banner Image (only shown on mobilei) */}\r\n+              {/* <div className=\"w-full h-[200px] mb-4 sm:hidden flex justify-center items-center\">\r\n+  <img\r\n+    // src={jungle.src}\r\n+    alt=\"Mobile Banner\"\r\n+    className=\"w-full h-full object-cover\"\r\n+  />\r\n+</div> */}\r\n+\r\n+              {/* Left Side: Tabs for Sign Up / Sign In */}\r\n+              <Tabs defaultValue=\"signIn\" className=\"w-full sm:w-1/2 p-2 flex flex-col\">\r\n+                <TabsList className=\"bg-dark-blue w-full text-gray-400\">\r\n+                  <TabsTrigger\r\n+                    className=\"w-1/2 py-2 text-center font-semibold focus:outline-none aria-selected:text-white aria-selected:text-[22px] aria-selected:border-b-2 aria-selected:border-green-500\"\r\n+                    value=\"signUp\"\r\n+                    style={{ color: '#fff' }}\r\n+                    onClick={() => setIsForgotPassword(false)}\r\n+                  >\r\n+                    Sign Up\r\n+                  </TabsTrigger>\r\n+                  <TabsTrigger\r\n+                    className=\"w-1/2 py-2 text-center font-semibold focus:outline-none aria-selected:text-white aria-selected:text-[22px] aria-selected:border-b-2 aria-selected:border-green-500\"\r\n+                    value=\"signIn\"\r\n+                    style={{ color: '#fff' }}\r\n+                    onClick={() => setIsForgotPassword(false)}\r\n+                  >\r\n+                    Sign In\r\n+                  </TabsTrigger>\r\n+                </TabsList>\r\n+\r\n+                <TabsContent value=\"signUp\" className=\"flex-grow p-4\">\r\n+                  <div className=\"h-full flex flex-col\">\r\n+                    <UserForm\r\n+                      controls={SIGNUP}\r\n+                      isSignUp={true}\r\n+                      setOpen={setOpen}\r\n+                      setToastState={setToastState}\r\n+                    />\r\n+                  </div>\r\n+                </TabsContent>\r\n+\r\n+                <TabsContent value=\"signIn\" className=\"flex-grow p-4\">\r\n+                  <div className=\"h-full flex flex-col\">\r\n+                    {isForgotPassword ? (\r\n+                      <>\r\n+                        <p className=\"text-[rgb(var(--lb-blue-250))] text-[14px] mb-2\">\r\n+                          Please enter your email. We will send you a reset link for new password.\r\n+                        </p>\r\n+                        <UserForm\r\n+                          controls={FORGOT_PASSWORD}\r\n+                          setOpen={setOpen}\r\n+                          setIsForgotPassword={setIsForgotPassword}\r\n+                          isForgotPassword={isForgotPassword}\r\n+                          setToastState={setToastState}\r\n+                        />\r\n+                      </>\r\n+                    ) : (\r\n+                      <UserForm\r\n+                        controls={SIGNIN}\r\n+                        setOpen={setOpen}\r\n+                        setIsForgotPassword={setIsForgotPassword}\r\n+                        setToastState={setToastState}\r\n+                      />\r\n+                    )}\r\n+                  </div>\r\n+                </TabsContent>\r\n+              </Tabs>\r\n+\r\n+              {/* Right Side: Desktop Banner Image (shown only on desktop) */}\r\n+              <div className=\"w-1/2 relative justify-center items-center max-[899px]:hidden sm:flex\">\r\n+                {signupLoading ? (\r\n+                  <p className=\"text-white text-center\">Loading banner...</p>\r\n+                ) : signupData?.length > 0 ? (\r\n+                  signupData.map((banner, index) => (\r\n+                    <a\r\n+                      key={index}\r\n+                      href={banner?.imageUrl || '#'}\r\n+                      target=\"_blank\"\r\n+                      rel=\"noopener noreferrer\"\r\n+                      className=\"w-full\"\r\n+                    >\r\n+                      <img\r\n+                        src={banner?.imageUrl || 'https://luckybird.io/img/back.47e88397.png'}\r\n+                        alt={`banner-${index}`}\r\n+                        className=\"h-[434px] w-full max-h-[434px] object-cover object-right\"\r\n+                      />\r\n+                    </a>\r\n+                  ))\r\n+                ) : (\r\n+                  <img\r\n+                    src=\"https://luckybird.io/img/back.47e88397.png\"\r\n+                    alt=\"default banner\"\r\n+                    className=\"h-auto w-full max-h-[434px] object-cover\"\r\n+                  />\r\n+                )}\r\n+              </div>\r\n+            </div>\r\n+          </DialogHeader>\r\n+        </DialogContent>\r\n+      </Dialog>\r\n+\r\n+      {/* Toast Notification */}\r\n+      <CustomToast\r\n+        showToast={showToast}\r\n+        setShowToast={(val) =>\r\n+          setToastState((prev) => ({ ...prev, showToast: val }))\r\n+        }\r\n+        message={message}\r\n+        status={status}\r\n+        duration={2000}\r\n+      />\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+export default LoginSignup;\r\n"
                },
                {
                    "date": 1754366969255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n   const pathname = usePathname();\r\n   const newPasswordKey = searchParams.get('newPasswordKey');\r\n \r\n   const [open, setOpen] = useState(isEmpty(isToken));\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(!isEmpty(isToken));\r\n   const [isForgotPassword, setIsForgotPassword] = useState(false);\r\n   const [toastState, setToastState] = useState({\r\n     showToast: false,\r\n     message: '',\r\n@@ -40,39 +41,55 @@\n   const { signupData, signupLoading } = useSignup();\r\n   const location = useGeoLocation();\r\n \r\n   useEffect(() => {\r\n-    const token = getAccessToken();\r\n-    if (isEmpty(token)) {\r\n-      setOpen(true);\r\n-    } else {\r\n-      setOpen(false);\r\n-    }\r\n+    const checkToken = () => {\r\n+      const token = getAccessToken();\r\n+      const hasToken = !isEmpty(token);\r\n+      \r\n+      setIsAuthenticated(hasToken);\r\n+      setOpen(!hasToken);\r\n+    };\r\n+\r\n+    // Check immediately\r\n+    checkToken();\r\n+\r\n+    // Also check after a small delay to handle SSO redirects\r\n+    const timeoutId = setTimeout(checkToken, 100);\r\n+\r\n+    return () => clearTimeout(timeoutId);\r\n   }, [router]);\r\n \r\n   // Listen for storage changes (when token is added/removed)\r\n   useEffect(() => {\r\n     const handleStorageChange = () => {\r\n       const token = getAccessToken();\r\n-      if (isEmpty(token)) {\r\n-        setOpen(true);\r\n-      } else {\r\n-        setOpen(false);\r\n-      }\r\n+      const hasToken = !isEmpty(token);\r\n+      \r\n+      setIsAuthenticated(hasToken);\r\n+      setOpen(!hasToken);\r\n     };\r\n \r\n+    // Listen for storage events\r\n     window.addEventListener('storage', handleStorageChange);\r\n     \r\n+    // Listen for custom storage events (for same-tab updates)\r\n+    window.addEventListener('storage', handleStorageChange);\r\n+    \r\n     // Also check when the component mounts and when window gains focus\r\n     const handleFocus = () => {\r\n       handleStorageChange();\r\n     };\r\n \r\n     window.addEventListener('focus', handleFocus);\r\n \r\n+    // Check periodically for token changes (for SSO redirects)\r\n+    const intervalId = setInterval(handleStorageChange, 500);\r\n+\r\n     return () => {\r\n       window.removeEventListener('storage', handleStorageChange);\r\n       window.removeEventListener('focus', handleFocus);\r\n+      clearInterval(intervalId);\r\n     };\r\n   }, []);\r\n \r\n   useEffect(() => {\r\n@@ -89,9 +106,9 @@\n     <>\r\n       <Dialog\r\n         open={open}\r\n         onOpenChange={(isOpen) =>\r\n-          isOpen && !isEmpty(getAccessToken()) && setOpen(isOpen)\r\n+          isOpen && isAuthenticated && setOpen(isOpen)\r\n         }\r\n         modal\r\n         className=\"w-full\"\r\n       >\r\n"
                }
            ],
            "date": 1753424582912,
            "name": "Commit-0",
            "content": "'use client';\nimport UserForm from './UserForm';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { FORGOT_PASSWORD, SIGNIN, SIGNUP } from './constant';\nimport { getAccessToken } from '@/services/storageUtils';\nimport { isEmpty } from '@/lib/utils';\nimport { usePathname, useSearchParams } from 'next/navigation';\nimport CustomToast from '@/common/components/custom-toaster';\nimport useSignup from './hooks/useSignup';\nimport useGeoLocation from '@/common/hook/useGeoLocation';\n// import { jungle } from '@/assets/png';\n// import { mobileiImage } from '@/assets/png';\n\nconst LoginSignup = () => {\n  const router = useRouter();\n  const isToken = getAccessToken();\n\n  const searchParams = useSearchParams();\n  const pathname = usePathname();\n  const newPasswordKey = searchParams.get('newPasswordKey');\n\n  const [open, setOpen] = useState(isEmpty(isToken));\n  const [isForgotPassword, setIsForgotPassword] = useState(false);\n  const [toastState, setToastState] = useState({\n    showToast: false,\n    message: '',\n    status: '',\n  });\n\n  const { showToast, message, status } = toastState;\n\n  const { signupData, signupLoading } = useSignup();\n  const location = useGeoLocation();\n\n  useEffect(() => {\n    if (isEmpty(getAccessToken())) {\n      setOpen(true);\n    }\n  }, [router]);\n\n  useEffect(() => {\n    if (location.loaded && !location.error) {\n      console.log('User geolocation:', location.coordinates);\n    }\n  }, [location]);\n\n  if (pathname === '/reset-password' && newPasswordKey) {\n    return null;\n  }\n\n  return (\n    <>\n      <Dialog\n        open={open}\n        onOpenChange={(isOpen) =>\n          isOpen && !isEmpty(getAccessToken()) && setOpen(isOpen)\n        }\n        modal\n        className=\"w-full\"\n      >\n        <DialogContent\n          onPointerDownOutside={(e) => e.preventDefault()}\n          className=\"p-2 border-radius-0 gap-0 w-full sm:w-[800px] max-w-[98%] flex border-none\"\n        >\n          <DialogTitle />\n          <DialogHeader className=\"w-full\">\n            <div className=\"flex w-full h-full flex-col sm:flex-row\">\n\n              {/* âœ… Mobilei Banner Image (only shown on mobilei) */}\n              {/* <div className=\"w-full h-[200px] mb-4 sm:hidden flex justify-center items-center\">\n  <img\n    // src={jungle.src}\n    alt=\"Mobile Banner\"\n    className=\"w-full h-full object-cover\"\n  />\n</div> */}\n\n              {/* Left Side: Tabs for Sign Up / Sign In */}\n              <Tabs defaultValue=\"signIn\" className=\"w-full sm:w-1/2 p-2 flex flex-col\">\n                <TabsList className=\"bg-dark-blue w-full text-gray-400\">\n                  <TabsTrigger\n                    className=\"w-1/2 py-2 text-center font-semibold focus:outline-none aria-selected:text-white aria-selected:text-[22px] aria-selected:border-b-2 aria-selected:border-green-500\"\n                    value=\"signUp\"\n                    style={{ color: '#fff' }}\n                    onClick={() => setIsForgotPassword(false)}\n                  >\n                    Sign Up\n                  </TabsTrigger>\n                  <TabsTrigger\n                    className=\"w-1/2 py-2 text-center font-semibold focus:outline-none aria-selected:text-white aria-selected:text-[22px] aria-selected:border-b-2 aria-selected:border-green-500\"\n                    value=\"signIn\"\n                    style={{ color: '#fff' }}\n                    onClick={() => setIsForgotPassword(false)}\n                  >\n                    Sign In\n                  </TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"signUp\" className=\"flex-grow p-4\">\n                  <div className=\"h-full flex flex-col\">\n                    <UserForm\n                      controls={SIGNUP}\n                      isSignUp={true}\n                      setOpen={setOpen}\n                      setToastState={setToastState}\n                    />\n                  </div>\n                </TabsContent>\n\n                <TabsContent value=\"signIn\" className=\"flex-grow p-4\">\n                  <div className=\"h-full flex flex-col\">\n                    {isForgotPassword ? (\n                      <>\n                        <p className=\"text-[rgb(var(--lb-blue-250))] text-[14px] mb-2\">\n                          Please enter your email. We will send you a reset link for new password.\n                        </p>\n                        <UserForm\n                          controls={FORGOT_PASSWORD}\n                          setOpen={setOpen}\n                          setIsForgotPassword={setIsForgotPassword}\n                          isForgotPassword={isForgotPassword}\n                          setToastState={setToastState}\n                        />\n                      </>\n                    ) : (\n                      <UserForm\n                        controls={SIGNIN}\n                        setOpen={setOpen}\n                        setIsForgotPassword={setIsForgotPassword}\n                        setToastState={setToastState}\n                      />\n                    )}\n                  </div>\n                </TabsContent>\n              </Tabs>\n\n              {/* Right Side: Desktop Banner Image (shown only on desktop) */}\n              <div className=\"w-1/2 relative justify-center items-center max-[899px]:hidden sm:flex\">\n                {signupLoading ? (\n                  <p className=\"text-white text-center\">Loading banner...</p>\n                ) : signupData?.length > 0 ? (\n                  signupData.map((banner, index) => (\n                    <a\n                      key={index}\n                      href={banner?.imageUrl || '#'}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"w-full\"\n                    >\n                      <img\n                        src={banner?.imageUrl || 'https://luckybird.io/img/back.47e88397.png'}\n                        alt={`banner-${index}`}\n                        className=\"h-[434px] w-full max-h-[434px] object-cover object-right\"\n                      />\n                    </a>\n                  ))\n                ) : (\n                  <img\n                    src=\"https://luckybird.io/img/back.47e88397.png\"\n                    alt=\"default banner\"\n                    className=\"h-auto w-full max-h-[434px] object-cover\"\n                  />\n                )}\n              </div>\n            </div>\n          </DialogHeader>\n        </DialogContent>\n      </Dialog>\n\n      {/* Toast Notification */}\n      <CustomToast\n        showToast={showToast}\n        setShowToast={(val) =>\n          setToastState((prev) => ({ ...prev, showToast: val }))\n        }\n        message={message}\n        status={status}\n        duration={2000}\n      />\n    </>\n  );\n};\n\nexport default LoginSignup;\n"
        }
    ]
}