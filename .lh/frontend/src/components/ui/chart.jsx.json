{
    "sourceFile": "frontend/src/components/ui/chart.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754364715388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754364715388,
            "name": "Commit-0",
            "content": "/* eslint-disable no-unused-vars */\r\n'use client';\r\nimport * as React from 'react';\r\nimport * as RechartsPrimitive from 'recharts';\r\n\r\nimport { cn } from '@/lib/utils';\r\n\r\n// Format: { THEME_NAME: CSS_SELECTOR }\r\nconst THEMES = {\r\n  light: '',\r\n  dark: '.dark'\r\n};\r\n\r\nconst ChartContext = React.createContext(null);\r\n\r\nfunction useChart() {\r\n  const context = React.useContext(ChartContext);\r\n\r\n  if (!context) {\r\n    throw new Error('useChart must be used within a <ChartContainer />');\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nconst ChartContainer = React.forwardRef(({ id, className, children, config, ...props }, ref) => {\r\n  const uniqueId = React.useId();\r\n  const chartId = `chart-${id || uniqueId.replace(/:/g, '')}`;\r\n\r\n  return (\r\n    (<ChartContext.Provider value={{ config }}>\r\n      <div\r\n        data-chart={chartId}\r\n        ref={ref}\r\n        className={cn(\r\n          'flex aspect-video justify-center text-xs [&_.recharts-cartesian-grid_line]:custom-stroke-ccc',\r\n          className\r\n        )}\r\n        {...props}>\r\n        <ChartStyle id={chartId} config={config} />\r\n        <RechartsPrimitive.ResponsiveContainer>\r\n          {children}\r\n        </RechartsPrimitive.ResponsiveContainer>\r\n      </div>\r\n    </ChartContext.Provider>)\r\n  );\r\n});\r\nChartContainer.displayName = 'Chart';\r\n\r\nconst ChartStyle = ({\r\n  id,\r\n  config\r\n}) => {\r\n  // eslint-disable-next-line no-unused-vars\r\n  const colorConfig = Object.entries(config).filter(([_, config]) => config.theme || config.color);\r\n\r\n  if (!colorConfig.length) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    (<style\r\n      dangerouslySetInnerHTML={{\r\n        __html: Object.entries(THEMES)\r\n          .map(([theme, prefix]) => `\r\n${prefix} [data-chart=${id}] {\r\n${colorConfig\r\n              .map(([key, itemConfig]) => {\r\n                const color =\r\n                  itemConfig.theme?.[theme] ||\r\n                  itemConfig.color;\r\n                return color ? `  --color-${key}: ${color};` : null;\r\n              })\r\n              .join('\\n')}\r\n}\r\n`)\r\n          .join('\\n'),\r\n      }} />)\r\n  );\r\n};\r\n\r\nconst ChartTooltip = RechartsPrimitive.Tooltip;\r\n\r\nconst ChartTooltipContent = React.forwardRef((\r\n  {\r\n    active,\r\n    payload,\r\n    className,\r\n    indicator = 'dot',\r\n    hideLabel = false,\r\n    hideIndicator = false,\r\n    label,\r\n    labelFormatter,\r\n    labelClassName,\r\n    formatter,\r\n    color,\r\n    nameKey,\r\n    labelKey,\r\n  },\r\n  ref\r\n) => {\r\n  const { config } = useChart();\r\n\r\n  const tooltipLabel = React.useMemo(() => {\r\n    if (hideLabel || !payload?.length) {\r\n      return null;\r\n    }\r\n\r\n    const [item] = payload;\r\n    const key = `${labelKey || item.dataKey || item.name || 'value'}`;\r\n    const itemConfig = getPayloadConfigFromPayload(config, item, key);\r\n    const value =\r\n      !labelKey && typeof label === 'string'\r\n        ? config[label]?.label || label\r\n        : itemConfig?.label;\r\n\r\n    if (labelFormatter) {\r\n      return (\r\n        (<div className={cn('font-medium', labelClassName)}>\r\n          {labelFormatter(value, payload)}\r\n        </div>)\r\n      );\r\n    }\r\n\r\n    if (!value) {\r\n      return null;\r\n    }\r\n\r\n    return <div className={cn('font-medium', labelClassName)}>{value}</div>;\r\n  }, [\r\n    label,\r\n    labelFormatter,\r\n    payload,\r\n    hideLabel,\r\n    labelClassName,\r\n    config,\r\n    labelKey,\r\n  ]);\r\n\r\n  if (!active || !payload?.length) {\r\n    return null;\r\n  }\r\n\r\n  const nestLabel = payload.length === 1 && indicator !== 'dot';\r\n\r\n  return (\r\n    (<div\r\n      ref={ref}\r\n      className={cn(\r\n        'grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl',\r\n        className\r\n      )}>\r\n      {!nestLabel ? tooltipLabel : null}\r\n      <div className=\"grid gap-1.5\">\r\n        {payload.map((item, index) => {\r\n          const key = `${nameKey || item.name || item.dataKey || 'value'}`;\r\n          const itemConfig = getPayloadConfigFromPayload(config, item, key);\r\n          const indicatorColor = color || item.payload.fill || item.color;\r\n\r\n          return (\r\n            (<div\r\n              key={item.dataKey}\r\n              className={cn(\r\n                'flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground',\r\n                indicator === 'dot' && 'items-center'\r\n              )}>\r\n              {formatter && item?.value !== undefined && item.name ? (\r\n                formatter(item.value, item.name, item, index, item.payload)\r\n              ) : (\r\n                <>\r\n                  {itemConfig?.icon ? (\r\n                    <itemConfig.icon />\r\n                  ) : (\r\n                    !hideIndicator && (\r\n                      <div\r\n                        className={cn('shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]', {\r\n                          'h-2.5 w-2.5': indicator === 'dot',\r\n                          'w-1': indicator === 'line',\r\n                          'w-0 border-[1.5px] border-dashed bg-transparent':\r\n                            indicator === 'dashed',\r\n                          'my-0.5': nestLabel && indicator === 'dashed',\r\n                        })}\r\n                        style={\r\n                          {\r\n                            '--color-bg': indicatorColor,\r\n                            '--color-border': indicatorColor\r\n                          }\r\n                        } />\r\n                    )\r\n                  )}\r\n                  <div\r\n                    className={cn(\r\n                      'flex flex-1 justify-between leading-none',\r\n                      nestLabel ? 'items-end' : 'items-center'\r\n                    )}>\r\n                    <div className=\"grid gap-1.5\">\r\n                      {nestLabel ? tooltipLabel : null}\r\n                      <span className=\"text-muted-foreground\">\r\n                        {itemConfig?.label || item.name}\r\n                      </span>\r\n                    </div>\r\n                    {item.value && (\r\n                      <span className=\"font-mono font-medium tabular-nums text-foreground\">\r\n                        {item.value.toLocaleString()}\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>)\r\n          );\r\n        })}\r\n      </div>\r\n    </div>)\r\n  );\r\n});\r\nChartTooltipContent.displayName = 'ChartTooltip';\r\n\r\nconst ChartLegend = RechartsPrimitive.Legend;\r\n\r\nconst ChartLegendContent = React.forwardRef((\r\n  { className, hideIcon = false, payload, verticalAlign = 'bottom', nameKey },\r\n  ref\r\n) => {\r\n  const { config } = useChart();\r\n\r\n  if (!payload?.length) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    (<div\r\n      ref={ref}\r\n      className={cn(\r\n        'flex items-center justify-center gap-4',\r\n        verticalAlign === 'top' ? 'pb-3' : 'pt-3',\r\n        className\r\n      )}>\r\n      {payload.map((item) => {\r\n        const key = `${nameKey || item.dataKey || 'value'}`;\r\n        const itemConfig = getPayloadConfigFromPayload(config, item, key);\r\n\r\n        return (\r\n          (<div\r\n            key={item.value}\r\n            className={cn(\r\n              'flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground'\r\n            )}>\r\n            {itemConfig?.icon && !hideIcon ? (\r\n              <itemConfig.icon />\r\n            ) : (\r\n              <div\r\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\r\n                style={{\r\n                  backgroundColor: item.color,\r\n                }} />\r\n            )}\r\n            {itemConfig?.label}\r\n          </div>)\r\n        );\r\n      })}\r\n    </div>)\r\n  );\r\n});\r\nChartLegendContent.displayName = 'ChartLegend';\r\n\r\n// Helper to extract item config from a payload.\r\nfunction getPayloadConfigFromPayload(\r\n  config,\r\n  payload,\r\n  key\r\n) {\r\n  if (typeof payload !== 'object' || payload === null) {\r\n    return undefined;\r\n  }\r\n\r\n  const payloadPayload =\r\n    'payload' in payload &&\r\n      typeof payload.payload === 'object' &&\r\n      payload.payload !== null\r\n      ? payload.payload\r\n      : undefined;\r\n\r\n  let configLabelKey = key;\r\n\r\n  if (\r\n    key in payload &&\r\n    typeof payload[key] === 'string'\r\n  ) {\r\n    configLabelKey = payload[key];\r\n  } else if (\r\n    payloadPayload &&\r\n    key in payloadPayload &&\r\n    typeof payloadPayload[key] === 'string'\r\n  ) {\r\n    configLabelKey = payloadPayload[key];\r\n  }\r\n\r\n  return configLabelKey in config\r\n    ? config[configLabelKey]\r\n    : config[key];\r\n}\r\n\r\nexport {\r\n  ChartContainer,\r\n  ChartTooltip,\r\n  ChartTooltipContent,\r\n  ChartLegend,\r\n  ChartLegendContent,\r\n  ChartStyle,\r\n};\r\n"
        }
    ]
}