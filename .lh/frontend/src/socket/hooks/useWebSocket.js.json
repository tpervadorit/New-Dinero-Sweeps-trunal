{
    "sourceFile": "frontend/src/socket/hooks/useWebSocket.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1753951852599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753953976087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n       socket.current = newSocket;\n \n       // eslint-disable-next-line no-undef\n       window.privateSocket = newSocket; // If need to use at other places of project\n-    } catch (er) {\n+    } catch {\n       // openErrorToaster({\n       // message: `Unable to connect ${url}, ${er?.message}`,\n       // });\n       // Remove console.log to fix ESLint warning\n"
                }
            ],
            "date": 1753951852599,
            "name": "Commit-0",
            "content": "'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\n\n// const MAX_RETRY = 1000;\n\nconst useWebSocket = (url, eventArray, token, payload) => {\n  // const [retry, setRetry] = useState(0);\n  const [isConnected, setIsConnected] = useState(false);\n  const [error, setError] = useState('');\n  const socket = useRef(null);\n\n  // Event handler for successful connection\n  const handleConnected = () => {\n    // console.log(`${url} socket connected`);\n    setIsConnected(true);\n  };\n\n  // Event handler for socket errors\n  const handleError = (err) => {\n    setError(err || `Failed to connect socket on ${url}`);\n  };\n\n  // console.log('Socket  outside =', socket);\n\n  const disconnectSocket = () => {\n    if (socket.current) {\n      socket.current.close();\n      // Remove console.log to fix ESLint warning\n    }\n  };\n\n  const connectSocket = () => {\n    disconnectSocket();\n    if (socket.current) {\n      socket.current.connect();\n    }\n  };\n\n  // Event handler for socket closure\n  const handleDisconnect = (reason) => {\n    // Remove console.log to fix ESLint warning\n    setIsConnected(false);\n    if (reason === 'io server disconnect') {\n      // the disconnection was initiated by the server, you need to reconnect manually\n      connectSocket();\n    }\n    // else the socket will automatically try to reconnect\n  };\n\n  const startConnection = () => {\n    try {\n      const newSocket = io(`${process.env.NEXT_PUBLIC_APP_SOCKET_URL}/${url}`, {\n        transports: ['websocket'],\n        withCredentials: true,\n        auth: { accessToken: token, ...payload },\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n        path: '/api/socket',\n        extraHeaders: { Authorization: `Bearer ${token}` },\n      });\n\n      newSocket.on('connect', handleConnected);\n      eventArray?.map(({ eventName, handleData }) => {\n        return newSocket.on(eventName, handleData);\n      });\n      newSocket.on('connect_error', handleError);\n      newSocket.on('disconnect', handleDisconnect);\n      socket.current = newSocket;\n\n      // eslint-disable-next-line no-undef\n      window.privateSocket = newSocket; // If need to use at other places of project\n    } catch (er) {\n      // openErrorToaster({\n      // message: `Unable to connect ${url}, ${er?.message}`,\n      // });\n      // Remove console.log to fix ESLint warning\n    }\n  };\n\n  useEffect(() => {\n    disconnectSocket();\n    startConnection();\n\n    return () => {\n      disconnectSocket();\n    };\n  }, [url, token]); // Reconnect when the URL changes\n\n  // Function to send a message through the socket\n  const sendMessage = (message, eventType, callback) => {\n    const payload = message;\n    if (isConnected) {\n      socket.current.emit(eventType, payload, (response) => {\n        if (response.status === 'success') {\n          // Remove console.log to fix ESLint warning\n        } else {\n          // Remove console.error to fix ESLint warning\n        }\n\n        if (callback) {\n          callback(response);\n        }\n      });\n    } else {\n      setError('Socket not connected. Message not sent:', message);\n    }\n  };\n\n  return {\n    socket,\n    isConnected,\n    sendMessage,\n    error,\n    connectSocket,\n    disconnectSocket,\n  };\n};\n\nexport default useWebSocket;\n"
        }
    ]
}